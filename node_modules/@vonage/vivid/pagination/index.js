import { B as Button, b as buttonRegistries } from '../shared/definition7.js';
import { g as global$1, l as fails$2, k as functionUncurryThis, G as _export, F as FoundationElement, _ as __decorate, a as attr, b as __metadata, o as observable, V as volatile, a7 as addToUnscopables$1, a8 as arrayIncludes, w as wellKnownSymbol$2, M as isObject$1, c as classofRaw, T as requireObjectCoercible$1, h as html, r as registerFactory } from '../shared/index.js';
import { t as toString$2 } from '../shared/to-string.js';
import { w as whitespaces$1, s as stringTrim } from '../shared/string-trim.js';
import '../shared/es.regexp.to-string.js';
import { a as Size } from '../shared/enums.js';
import { e as elements } from '../shared/node-observation.js';
import { r as ref } from '../shared/ref.js';
import { r as repeat } from '../shared/repeat.js';
import { c as children } from '../shared/children.js';
import { c as classNames } from '../shared/class-names.js';
import { w as when } from '../shared/when.js';
import '../shared/definition3.js';
import '../shared/icon.js';
import '../shared/_has.js';
import '../shared/definition4.js';
import '../shared/focus.js';
import '../shared/definition9.js';
import '../shared/base-progress.js';
import '../shared/affix.js';
import '../shared/button.js';
import '../shared/apply-mixins.js';
import '../shared/form-associated.js';
import '../shared/key-codes.js';
import '../shared/aria-global.js';
import '../shared/start-end.js';
import '../shared/focus2.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.control {\n  display: inline-flex;\n  justify-content: space-between;\n}\n\n.buttons-wrapper {\n  display: flex;\n  column-gap: 4px;\n}\n\n.dots {\n  align-self: center;\n  text-align: center;\n}\n.dots:not(.size-super-condensed) {\n  font: var(--vvd-typography-base-bold);\n}\n.dots.size-super-condensed {\n  font: var(--vvd-typography-base-condensed-bold);\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n}\n.dots.size-condensed {\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n}\n.dots.size-normal {\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n}";

var global = global$1;
var fails$1 = fails$2;
var uncurryThis$1 = functionUncurryThis;
var toString$1 = toString$2;
var trim = stringTrim.trim;
var whitespaces = whitespaces$1;

var $parseInt$1 = global.parseInt;
var Symbol = global.Symbol;
var ITERATOR = Symbol && Symbol.iterator;
var hex = /^[+-]?0x/i;
var exec = uncurryThis$1(hex.exec);
var FORCED = $parseInt$1(whitespaces + '08') !== 8 || $parseInt$1(whitespaces + '0x16') !== 22
  // MS Edge 18- broken with boxed symbols
  || (ITERATOR && !fails$1(function () { $parseInt$1(Object(ITERATOR)); }));

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
var numberParseInt = FORCED ? function parseInt(string, radix) {
  var S = trim(toString$1(string));
  return $parseInt$1(S, (radix >>> 0) || (exec(hex, S) ? 16 : 10));
} : $parseInt$1;

var $$2 = _export;
var $parseInt = numberParseInt;

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
$$2({ global: true, forced: parseInt != $parseInt }, {
  parseInt: $parseInt
});

const MAX_DIGITS_AND_PLACEHOLDERS = 7;
const totalConverter = {
  fromView: value => parseInt(value, 10),
  toView: value => value.toString()
};
class Pagination extends FoundationElement {
  constructor() {
    super();
    this.navIcons = false;
    this.total = 0;
    this.selectedIndex = 0;
    this.addEventListener('tabpressed', e => {
      const {
        value: currentLabel,
        shiftKey
      } = e.detail;
      const index = this.paginationButtons.findIndex(button => Number(button.label) === currentLabel);
      const focusDirection = shiftKey ? -1 : 1;
      const newIndex = index + focusDirection;
      if (newIndex < 0) {
        return this.prevButton.focus();
      }
      if (newIndex > this.paginationButtons.length - 1) {
        return this.nextButton.focus();
      }
      this.paginationButtons && this.paginationButtons[index + focusDirection].focus();
    });
  }
  get pagesList() {
    return new Array(this.total < MAX_DIGITS_AND_PLACEHOLDERS ? this.total : MAX_DIGITS_AND_PLACEHOLDERS).fill(0).map((_, i, arr) => {
      if (i === 0) return 1;
      if (i === arr.length - 1) return this.total;
      if (this.selectedIndex !== undefined && this.total > MAX_DIGITS_AND_PLACEHOLDERS) {
        if (this.selectedIndex < 4) {
          if (i === MAX_DIGITS_AND_PLACEHOLDERS - 2) return '...';
        }
        if (this.selectedIndex >= 4 && this.selectedIndex <= this.total - 5) {
          if (i > 1 && i < MAX_DIGITS_AND_PLACEHOLDERS - 2) return this.selectedIndex + (i - 2);
          if (i === 1 || i === MAX_DIGITS_AND_PLACEHOLDERS - 2) return '...';
        }
        if (this.selectedIndex > this.total - 5) {
          if (i > 1) return this.total - (6 - i);
          if (i === 1) return '...';
        }
      }
      return i + 1;
    });
  }
  totalChanged(_, newValue) {
    if (newValue < 0) {
      this.total = 0;
    }
    this.selectedIndex = 0;
  }
  selectedIndexChanged(oldValue, newValue) {
    if (oldValue === undefined) return;
    this.$emit('pagination-change', {
      selectedIndex: newValue,
      total: this.total,
      oldIndex: oldValue
    });
  }
  paginationButtonsChanged(_, newValue) {
    newValue.forEach(button => {
      button.shadowRoot.querySelector('button').classList.add('icon-only');
    });
  }
}
__decorate([attr, __metadata("design:type", String)], Pagination.prototype, "size", void 0);
__decorate([observable, __metadata("design:type", Array)], Pagination.prototype, "paginationButtons", void 0);
__decorate([observable, __metadata("design:type", Function)], Pagination.prototype, "prevButton", void 0);
__decorate([observable, __metadata("design:type", Function)], Pagination.prototype, "nextButton", void 0);
__decorate([attr({
  attribute: 'nav-icons',
  mode: 'boolean'
}), __metadata("design:type", Object)], Pagination.prototype, "navIcons", void 0);
__decorate([volatile, __metadata("design:type", Object), __metadata("design:paramtypes", [])], Pagination.prototype, "pagesList", null);
__decorate([attr({
  mode: 'reflect',
  converter: totalConverter
}), __metadata("design:type", Number)], Pagination.prototype, "total", void 0);
__decorate([attr({
  mode: 'reflect',
  converter: totalConverter,
  attribute: 'selected-index'
}), __metadata("design:type", Object)], Pagination.prototype, "selectedIndex", void 0);

var $$1 = _export;
var $includes = arrayIncludes.includes;
var fails = fails$2;
var addToUnscopables = addToUnscopables$1;

// FF99+ bug
var BROKEN_ON_SPARSE = fails(function () {
  return !Array(1).includes();
});

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$$1({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');

var isObject = isObject$1;
var classof = classofRaw;
var wellKnownSymbol$1 = wellKnownSymbol$2;

var MATCH$1 = wellKnownSymbol$1('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
var isRegexp = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

var isRegExp = isRegexp;

var $TypeError = TypeError;

var notARegexp = function (it) {
  if (isRegExp(it)) {
    throw $TypeError("The method doesn't accept regular expressions");
  } return it;
};

var wellKnownSymbol = wellKnownSymbol$2;

var MATCH = wellKnownSymbol('match');

var correctIsRegexpLogic = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};

var $ = _export;
var uncurryThis = functionUncurryThis;
var notARegExp = notARegexp;
var requireObjectCoercible = requireObjectCoercible$1;
var toString = toString$2;
var correctIsRegExpLogic = correctIsRegexpLogic;

var stringIndexOf = uncurryThis(''.indexOf);

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~stringIndexOf(
      toString(requireObjectCoercible(this)),
      toString(notARegExp(searchString)),
      arguments.length > 1 ? arguments[1] : undefined
    );
  }
});

let _2 = t => t,
  _t,
  _t2,
  _t3,
  _t4;
const ALLOWED_SIZES = [Size.SuperCondensed, Size.Condensed, Size.Normal];
const handleSelection = (value, {
  parent: x
}) => {
  return x.selectedIndex = Number(value) - 1;
};
const handleKeyDown = (value, {
  event,
  parent
}) => {
  if (event.key === ' ' || event.key === 'Enter') {
    handleSelection(value, {
      parent
    });
  }
  if (event.key === 'Tab') {
    event.target.dispatchEvent(new CustomEvent('tabpressed', {
      detail: {
        value,
        shiftKey: event.shiftKey
      },
      bubbles: true,
      composed: true
    }));
  }
};
const getClasses = _ => classNames('control');
function getButtonAppearance(value, {
  parent
}) {
  return parent.selectedIndex === Number(value) - 1 ? 'filled' : 'ghost';
}
const paginationButtonRenderer = buttonTag => html(_t || (_t = _2`
	${0}
	${0}`), when(value => value !== '...', html(_t2 || (_t2 = _2`
		<${0} class="vwc-pagination-button"
									label="${0}"
									appearance="${0}"
									size="${0}"
									tabindex="0"
									aria-pressed="${0}"
									@click="${0}"
									@keydown="${0}"
		</${0}>
	`), buttonTag, value => value, getButtonAppearance, (_, {
  parent: x
}) => getPaginationSize(x), (value, {
  parent
}) => parent.selectedIndex === Number(value) - 1, handleSelection, handleKeyDown, buttonTag)), when(value => value === '...', html(_t3 || (_t3 = _2`<div class="dots size-${0}">...</div>`), getPaginationSize)));
const getPaginationSize = x => {
  if (!x.size || !ALLOWED_SIZES.includes(x.size)) {
    return Size.SuperCondensed;
  }
  return x.size;
};
const PaginationTemplate = context => {
  const buttonTag = context.tagFor(Button);
  const paginationButtonTemplate = paginationButtonRenderer(buttonTag);
  return html(_t4 || (_t4 = _2`
	<div class="${0}">
		<${0} class="prev-button" ${0}
									label="${0}"
									icon="${0}"
									size="${0}"
									?disabled="${0}"
									@click="${0}"
		></${0}>
		<div id="buttons-wrapper" class="buttons-wrapper" ${0}>
			${0}
		</div>
		<${0} class="next-button" ${0}
									label="${0}"
									icon="${0}"
									size="${0}"
									?disabled="${0}"
									@click="${0}"
		></${0}>
</div>`), getClasses, buttonTag, ref('prevButton'), x => !x.navIcons ? 'Previous' : null, x => x.navIcons ? 'chevron-left-line' : null, getPaginationSize, x => x.total === 0 || x.selectedIndex === 0, x => x.selectedIndex !== undefined && x.selectedIndex--, buttonTag, children({
    property: 'paginationButtons',
    filter: elements(buttonTag)
  }), repeat(x => x.pagesList, paginationButtonTemplate, {
    positioning: true
  }), buttonTag, ref('nextButton'), x => !x.navIcons ? 'Next' : null, x => x.navIcons ? 'chevron-right-line' : null, getPaginationSize, x => x.total === 0 || x.selectedIndex === x.total - 1, x => x.selectedIndex !== undefined && x.selectedIndex++, buttonTag);
};

const paginationDefinition = Pagination.compose({
  baseName: 'pagination',
  template: PaginationTemplate,
  styles: css_248z
});
const paginationRegistries = [paginationDefinition(), buttonRegistries];
const registerPagination = registerFactory(paginationRegistries);

registerPagination();
