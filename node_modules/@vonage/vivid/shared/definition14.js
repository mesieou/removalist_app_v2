import { _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { f as focusRegistries } from './definition4.js';
import { B as BreadcrumbItem$1 } from './breadcrumb-item.js';
import { t as textAnchorTemplate } from './text-anchor.template.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  display: flex;\n  align-items: center;\n  color: var(--vvd-color-canvas-text);\n  font: var(--vvd-typography-base);\n}\n.base .separator {\n  margin: 0 16px;\n  color: var(--vvd-color-neutral-600);\n  font-size: 12px;\n}\n\n.control {\n  position: relative;\n  font: inherit;\n}\n@supports selector(:focus-visible) {\n  .control:focus {\n    outline: none;\n  }\n}\n.control:any-link {\n  color: var(--vvd-color-cta-600);\n  text-decoration: none;\n}\n.control:any-link:hover {\n  text-decoration: underline;\n}\n\n.focus-indicator {\n  --focus-inset: -4px -8px;\n  --focus-stroke-gap-color: transparent;\n  border-radius: 6px;\n}\n.control:not(:focus-visible) > .focus-indicator {\n  display: none;\n}";

class BreadcrumbItem extends BreadcrumbItem$1 {
  constructor() {
    super();
  }
}
__decorate([attr, __metadata("design:type", String)], BreadcrumbItem.prototype, "text", void 0);

let _2 = t => t,
  _t,
  _t2,
  _t3,
  _t4;
const getClasses = _ => classNames('base');
const BreadcrumbItemTemplate = (context, definition) => {
  const iconTag = context.tagFor(Icon);
  return html(_t || (_t = _2`
	<div role="listitem" class="${0}">
		${0}

		${0}

		${0}
	</div>`), getClasses, when(x => x.text && !x.href, html(_t2 || (_t2 = _2`${0}`), x => x.text)), when(x => x.text && x.href && x.href.length > 0, html(_t3 || (_t3 = _2`${0}`), textAnchorTemplate(context))), when(x => x.separator, html(_t4 || (_t4 = _2`<${0} class="separator" name="chevron-right-solid"></${0}>`), iconTag, iconTag)));
};

const breadcrumbItemDefinition = BreadcrumbItem.compose({
  baseName: 'breadcrumb-item',
  template: BreadcrumbItemTemplate,
  styles: css_248z,
  shadowOptions: {
    delegatesFocus: true
  }
});
const breadcrumbItemRegistries = [breadcrumbItemDefinition(), ...iconRegistries, ...focusRegistries];
const registerBreadcrumbItem = registerFactory(breadcrumbItemRegistries);

export { breadcrumbItemRegistries as a, breadcrumbItemDefinition as b, registerBreadcrumbItem as r };
