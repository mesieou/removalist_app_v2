import { h as html, r as registerFactory } from './index.js';
import { f as focusRegistries } from './definition4.js';
import { R as Radio } from './radio.js';
import { f as focusTemplateFactory } from './focus2.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n@supports selector(:focus-visible) {\n  :host(:focus) {\n    outline: none;\n  }\n}\n.base {\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  gap: 8px;\n}\n.base {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-firm: var(--vvd-color-canvas-text);\n  --_connotation-color-faint: var(--vvd-color-neutral-50);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base:where(:checked, .checked):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-primary);\n}\n.base:where(:checked, .checked):where(:hover, .hover) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: var(--_connotation-color-primary);\n}\n.base:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-400);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--vvd-color-neutral-400);\n}\n.base:where(.readonly):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--vvd-color-neutral-600);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--vvd-color-neutral-400);\n}\n@supports (user-select: none) {\n  .base {\n    user-select: none;\n  }\n}\n.base.disabled {\n  cursor: not-allowed;\n  pointer-events: none;\n}\n\n.control {\n  position: relative;\n  flex-shrink: 0;\n  background-color: var(--_appearance-color-fill);\n  block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20));\n  border-radius: 50%;\n  box-shadow: inset 0 0 0 2px var(--_appearance-color-outline);\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20));\n}\n.control::after {\n  position: absolute;\n  background-color: var(--_appearance-color-text);\n  border-radius: inherit;\n  content: \"\";\n  inset: 5px;\n}\n.base:not(.checked) .control::after {\n  display: none;\n}\n\nlabel {\n  color: var(--vvd-color-canvas-text);\n  cursor: pointer;\n  font: var(--vvd-typography-base);\n}\n\n.focus-indicator {\n  --focus-inset: -3px;\n  --focus-stroke-gap-color: transparent;\n  border-radius: 50%;\n}\n:host(:not(:focus-visible)) .focus-indicator {\n  display: none;\n}";

let _ = t => t,
  _t,
  _t2;
const getClasses = ({
  checked,
  readOnly,
  disabled
}) => classNames('base', ['checked', Boolean(checked)], ['readonly', Boolean(readOnly)], ['disabled', Boolean(disabled)]);
const RadioTemplate = context => {
  const focusTemplate = focusTemplateFactory(context);
  return html(_t || (_t = _`
	<div class="${0}"
		role="radio"
		aria-checked="${0}"
		aria-required="${0}"
		aria-disabled="${0}"
		@keypress="${0}"
		@click="${0}"
	>
		<div class="control">
			${0}
		</div>
		${0}
	</div>
	`), getClasses, x => x.checked, x => x.required, x => x.disabled, (x, c) => x.keypressHandler(c.event), (x, c) => x.clickHandler(c.event), () => focusTemplate, when(x => x.label, html(_t2 || (_t2 = _`<label class="label">${0}</label>`), x => x.label)));
};

const radioDefinition = Radio.compose({
  baseName: 'radio',
  template: RadioTemplate,
  styles: css_248z
});
const radioRegistries = [radioDefinition(), ...focusRegistries];
const registerRadio = registerFactory(radioRegistries);

export { radioDefinition as a, radioRegistries as b, registerRadio as r };
