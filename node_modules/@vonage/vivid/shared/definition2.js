import { F as FoundationElement, _ as __decorate, a as attr, n as nullableNumberConverter, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { f as focusRegistries } from './definition4.js';
import { A as AffixIconWithTrailing, a as affixIconTemplateFactory } from './affix.js';
import { S as StartEnd } from './start-end.js';
import { a as applyMixins } from './apply-mixins.js';
import { f as focusTemplateFactory } from './focus2.js';
import { w as when } from './when.js';
import { r as ref } from './ref.js';

/**
 * An individual item in an {@link @microsoft/fast-foundation#(Accordion:class) }.
 *
 * @slot start - Content which can be provided between the heading and the icon
 * @slot end - Content which can be provided between the start slot and icon
 * @slot heading - Content which serves as the accordion item heading and text of the expand button
 * @slot - The default slot for accordion item content
 * @slot expanded-icon - The expanded icon
 * @slot collapsed-icon - The collapsed icon
 * @fires change - Fires a custom 'change' event when the button is invoked
 * @csspart heading - Wraps the button
 * @csspart button - The button which serves to invoke the item
 * @csspart heading-content - Wraps the slot for the heading content within the button
 * @csspart icon - The icon container
 * @csspart expanded-icon - The expanded icon slot
 * @csspart collapsed-icon - The collapsed icon
 * @csspart region - The wrapper for the accordion item content
 *
 * @public
 */
class AccordionItem$1 extends FoundationElement {
    constructor() {
        super(...arguments);
        /**
         * Configures the {@link https://www.w3.org/TR/wai-aria-1.1/#aria-level | level} of the
         * heading element.
         *
         * @defaultValue 2
         * @public
         * @remarks
         * HTML attribute: heading-level
         */
        this.headinglevel = 2;
        /**
         * Expands or collapses the item.
         *
         * @public
         * @remarks
         * HTML attribute: expanded
         */
        this.expanded = false;
        /**
         * @internal
         */
        this.clickHandler = (e) => {
            this.expanded = !this.expanded;
            this.change();
        };
        this.change = () => {
            this.$emit("change");
        };
    }
}
__decorate([
    attr({
        attribute: "heading-level",
        mode: "fromView",
        converter: nullableNumberConverter,
    })
], AccordionItem$1.prototype, "headinglevel", void 0);
__decorate([
    attr({ mode: "boolean" })
], AccordionItem$1.prototype, "expanded", void 0);
__decorate([
    attr
], AccordionItem$1.prototype, "id", void 0);
applyMixins(AccordionItem$1, StartEnd);

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n:host {\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n}\n\n.heading-container {\n  margin: 0;\n}\n\n.heading-button {\n  position: relative;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding: 16px;\n  border: none;\n  background-color: var(--_appearance-color-fill);\n  color: var(--_appearance-color-text);\n  cursor: pointer;\n  text-align: left;\n}\n.heading-button {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.heading-button:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.heading-button:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.heading-button {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-faint: var(--vvd-color-neutral-50);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n}\n@supports selector(:focus-visible) {\n  .heading-button:focus {\n    outline: none;\n  }\n}\n.heading-button.size-condensed {\n  font: var(--vvd-typography-base-bold);\n  gap: 12px;\n}\n.heading-button:not(.size-condensed) {\n  font: var(--vvd-typography-heading-4);\n  gap: 16px;\n}\n\n.heading-content {\n  flex: auto;\n}\n\n.meta {\n  overflow: hidden;\n  max-width: 20%;\n  flex-shrink: 0;\n  color: var(--vvd-color-neutral-600);\n  text-align: end;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.heading-button:not(.size-condensed) .meta {\n  font: var(--vvd-typography-base-bold);\n}\n.heading-button.size-condensed .meta {\n  font: var(--vvd-typography-base-condensed-bold);\n}\n\n.region {\n  display: none;\n  padding: 8px 32px 24px 16px;\n}\n:host([expanded]) .region {\n  display: block;\n}\n.region:not(.size-condensed).padded {\n  padding-inline-start: 52px;\n}\n.region.size-condensed.padded {\n  padding-inline-start: 44px;\n}\n\n.icon {\n  color: var(--vvd-color-neutral-600);\n}\n:host(:not([icon-trailing])) .icon:last-of-type {\n  color: var(--_appearance-color-text);\n}\n.heading-button:not(.size-condensed) .icon {\n  font: inherit;\n}\n.heading-button.size-condensed .icon {\n  font: var(--vvd-typography-base-extended);\n}\n\nbutton:not(:focus-visible) > .focus-indicator {\n  display: none;\n}";

class AccordionItem extends AccordionItem$1 {
  constructor() {
    super(...arguments);
    this.noIndicator = false;
  }
}
__decorate([attr, __metadata("design:type", String)], AccordionItem.prototype, "heading", void 0);
__decorate([attr({
  mode: 'boolean',
  attribute: 'no-indicator'
}), __metadata("design:type", Object)], AccordionItem.prototype, "noIndicator", void 0);
__decorate([attr, __metadata("design:type", String)], AccordionItem.prototype, "meta", void 0);
__decorate([attr, __metadata("design:type", String)], AccordionItem.prototype, "size", void 0);
applyMixins(AccordionItem, AffixIconWithTrailing);

let _ = t => t,
  _t,
  _t2,
  _t3;
const header = (context, hTag) => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  return html(_t || (_t = _`
		<${0} class="heading-container">
			<button
				class="heading-button ${0}"
				id="${0}"
				aria-expanded="${0}"
				aria-controls="${0}-panel"
				@click="${0}"
				${0}
			>
				${0}

				${0}

				<span class="heading-content">${0}</span>

				${0}

				${0}
				${0}

			</button>
		</${0}>
	`), hTag, x => x.size ? `size-${x.size}` : '', x => x.id, x => x.expanded, x => x.id, (x, c) => x.clickHandler(c.event), ref('expandbutton'), () => focusTemplate, x => x.icon && !x.iconTrailing ? affixIconTemplate(x.icon) : null, x => x.heading, when(x => x.meta, html(_t2 || (_t2 = _`<span class="meta">${0}</span>`), x => x.meta)), x => x.icon && x.iconTrailing ? affixIconTemplate(x.icon) : null, x => !(x.icon && x.iconTrailing) && !x.noIndicator ? affixIconTemplate(x.expanded ? 'chevron-up-solid' : 'chevron-down-solid') : null, hTag);
};
const AccordionItemTemplate = context => html(_t3 || (_t3 = _`
	${0}
	<div
		id="${0}-panel"
		aria-labelledby="${0}"
		role="region"
		class="region ${0} ${0}"
	>
		<slot></slot>
	</div>
`), x => header(context, 'h' + x.headinglevel), x => x.id, x => x.id, x => x.icon && !x.iconTrailing ? 'padded' : '', x => x.size ? `size-${x.size}` : '');

const accordionItemDefinition = AccordionItem.compose({
  baseName: 'accordion-item',
  template: AccordionItemTemplate,
  styles: css_248z,
  shadowOptions: {
    delegatesFocus: true
  }
});
const accordionItemRegistries = [accordionItemDefinition(), ...iconRegistries, ...focusRegistries];
const registerAccordionItem = registerFactory(accordionItemRegistries);

export { AccordionItem$1 as A, accordionItemRegistries as a, accordionItemDefinition as b, registerAccordionItem as r };
