import { F as FoundationElement, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { b as AffixIcon } from './affix.js';
import './focus.js';
import './form-elements.js';
import { a as applyMixins } from './apply-mixins.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  display: flex;\n  align-items: flex-start;\n  padding: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20));\n  background-color: var(--_appearance-color-fill);\n  border-radius: 6px;\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  column-gap: 16px;\n}\n.base.connotation-success {\n  --_connotation-color-primary: var(--vvd-color-success-500);\n  --_connotation-color-intermediate: var(--vvd-color-success-500);\n  --_connotation-color-backdrop: var(--vvd-color-success-50);\n}\n.base.connotation-information {\n  --_connotation-color-primary: var(--vvd-color-information-500);\n  --_connotation-color-intermediate: var(--vvd-color-information-500);\n  --_connotation-color-backdrop: var(--vvd-color-information-50);\n}\n.base.connotation-alert {\n  --_connotation-color-primary: var(--vvd-color-alert-500);\n  --_connotation-color-intermediate: var(--vvd-color-alert-500);\n  --_connotation-color-backdrop: var(--vvd-color-alert-50);\n}\n.base.connotation-warning {\n  --_connotation-color-primary: var(--vvd-color-warning-300);\n  --_connotation-color-intermediate: var(--vvd-color-warning-300);\n  --_connotation-color-backdrop: var(--vvd-color-warning-50);\n}\n.base:not(.connotation-success, .connotation-information, .connotation-alert, .connotation-warning) {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-intermediate: var(--vvd-color-neutral-500);\n  --_connotation-color-backdrop: var(--vvd-color-canvas);\n}\n.base {\n  --_appearance-color-text: var(--vvd-color-canvas-text);\n  --_appearance-color-fill: var(--_connotation-color-backdrop);\n  --_appearance-color-outline: var(--_connotation-color-intermediate);\n}\n@supports (contain: content) {\n  .base {\n    contain: content;\n  }\n}\n@supports not (contain: content) {\n  .base {\n    overflow: hidden;\n  }\n}\n\n.icon {\n  color: var(--_appearance-color-outline);\n  font-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n}\n\n.text {\n  display: flex;\n  min-height: 24px;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: flex-start;\n  justify-content: center;\n  gap: 4px;\n  text-align: start;\n}\n.text .headline {\n  font: var(--vvd-typography-base-bold);\n}\n.text .message {\n  font: var(--vvd-typography-base);\n}";

class Note extends FoundationElement {}
__decorate([attr, __metadata("design:type", String)], Note.prototype, "headline", void 0);
__decorate([attr, __metadata("design:type", String)], Note.prototype, "connotation", void 0);
applyMixins(Note, AffixIcon);

let _ = t => t,
  _t,
  _t2,
  _t3;
const getClasses = ({
  connotation
}) => classNames('base', `connotation-${connotation}`);
function getHeaderTemplate() {
  return html(_t || (_t = _`<div class="headline">${0}</div>`), x => x.headline);
}
const NoteTemplate = context => {
  const iconTag = context.tagFor(Icon);
  return html(_t2 || (_t2 = _`
    <div class="${0}">
			${0}
			<div class="text">
	        ${0}
			    <slot class="message"></slot>
			</div>
    </div>
`), getClasses, when(x => x.icon, html(_t3 || (_t3 = _`<${0} class="icon" name="${0}"></${0}>`), iconTag, x => x.icon, iconTag)), when(x => x.headline, getHeaderTemplate()));
};

const noteDefinition = Note.compose({
  baseName: 'note',
  template: NoteTemplate,
  styles: css_248z
});
const noteRegistries = [noteDefinition(), ...iconRegistries];
const registerNote = registerFactory(noteRegistries);

export { noteRegistries as a, noteDefinition as n, registerNote as r };
