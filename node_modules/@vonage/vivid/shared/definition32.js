import { F as FoundationElement, U as __classPrivateFieldGet, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { f as focusRegistries } from './definition4.js';
import { b as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { I as Icon } from './icon.js';
import { f as focusTemplateFactory } from './focus2.js';
import { w as when } from './when.js';
import { r as ref } from './ref.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.control {\n  position: relative;\n  display: flex;\n  box-sizing: border-box;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  border-radius: 6px;\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  cursor: pointer;\n  font: var(--vvd-typography-base);\n  gap: 12px;\n  hyphens: auto;\n  inline-size: 100%;\n  min-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n  padding-inline: 16px;\n  text-decoration: none;\n  vertical-align: middle;\n  word-break: break-word;\n}\n.control {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.control:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.control:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.control:where(.selected, [aria-current]):where(:not(:disabled, .disabled, :hover, .hover)) {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.control {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-faint: var(--vvd-color-neutral-50);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n}\n@supports selector(:focus-visible) {\n  .control:focus {\n    outline: none;\n  }\n}\n@supports (user-select: none) {\n  .control {\n    user-select: none;\n  }\n}\n.control .toggleIcon {\n  margin-inline-start: auto;\n}\n\n.control:not(:focus-visible) .focus-indicator {\n  display: none;\n}\n\n.icon {\n  font-size: 20px;\n  line-height: 1;\n}\n.control:not(.icon-only) .icon {\n  color: var(--vvd-color-neutral-600);\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  border-inline-start: 1px solid var(--vvd-color-neutral-200);\n  gap: 4px;\n  margin-block: 4px;\n  margin-inline-start: 20px;\n  padding-inline-start: 12px;\n}\n\ndetails > summary {\n  list-style: none;\n}\n\ndetails > summary::-webkit-details-marker {\n  display: none;\n}";

var _NavDisclosure_onToggle;
class NavDisclosure extends FoundationElement {
  constructor() {
    super(...arguments);
    this.open = false;
    _NavDisclosure_onToggle.set(this, () => {
      this.open = this.details.open;
      this.$emit('toggle');
    });
  }
  connectedCallback() {
    super.connectedCallback();
    this.details.addEventListener('toggle', __classPrivateFieldGet(this, _NavDisclosure_onToggle, "f"));
    this.details.open = this.open;
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.details.removeEventListener('toggle', __classPrivateFieldGet(this, _NavDisclosure_onToggle, "f"));
  }
}
_NavDisclosure_onToggle = new WeakMap();
__decorate([attr, __metadata("design:type", String)], NavDisclosure.prototype, "label", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], NavDisclosure.prototype, "open", void 0);
applyMixins(NavDisclosure, AffixIcon);

let _ = t => t,
  _t,
  _t2,
  _t3;
const NavDisclosureTemplate = context => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  const iconTag = context.tagFor(Icon);
  return html(_t || (_t = _`<details class="base" ${0} ?open=${0}>
        <summary class="control"
            role="button"
            aria-controls="disclosure-content"
			aria-expanded="${0}"
        >
            ${0}
            ${0}
			${0}
			${0}
			${0}
        </summary>
        <div class="content" id="disclosure-content">
			<slot></slot>
		</div>
    </details>
	`), ref('details'), x => x.open, x => x.open, x => affixIconTemplate(x.icon), x => x.label, when(x => x.open, html(_t2 || (_t2 = _`<${0} class="toggleIcon" name='chevron-up-solid'></${0}>`), iconTag, iconTag)), when(x => !x.open, html(_t3 || (_t3 = _`<${0} class="toggleIcon" name='chevron-down-solid'></${0}>`), iconTag, iconTag)), () => focusTemplate);
};

const navDisclosureDefinition = NavDisclosure.compose({
  baseName: 'nav-disclosure',
  template: NavDisclosureTemplate,
  styles: css_248z
});
const navDisclosureRegistries = [navDisclosureDefinition(), ...iconRegistries, ...focusRegistries];
const registerNavDisclosure = registerFactory(navDisclosureRegistries);

export { navDisclosureRegistries as a, navDisclosureDefinition as n, registerNavDisclosure as r };
