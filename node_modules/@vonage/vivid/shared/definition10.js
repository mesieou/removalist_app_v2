import { F as FoundationElement, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  display: inline-flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--_appearance-color-fill);\n  block-size: var(--_size);\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  inline-size: var(--_size);\n  vertical-align: middle;\n}\n.base.connotation-cta {\n  --_connotation-color-primary: var(--vvd-color-cta-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-firm: var(--vvd-color-cta-600);\n  --_connotation-color-fierce: var(--vvd-color-cta-700);\n  --_connotation-color-pale: var(--vvd-color-cta-300);\n}\n.base:not(.connotation-cta) {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-firm: var(--vvd-color-canvas-text);\n  --_connotation-color-fierce: var(--vvd-color-neutral-700);\n  --_connotation-color-pale: var(--vvd-color-neutral-300);\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.base.appearance-outlined {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base.appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base.size-condensed {\n  --_size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n}\n.base.size-condensed .initials {\n  font: var(--vvd-typography-base-condensed-bold);\n}\n.base.size-condensed .icon {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8)) / 2);\n  line-height: 1;\n}\n.base.size-expanded {\n  --_size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 8));\n}\n.base.size-expanded .initials {\n  font: var(--vvd-typography-heading-4);\n}\n.base.size-expanded .icon {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 8)) / 2);\n  line-height: 1;\n}\n.base:not(.size-condensed, .size-expanded) {\n  --_size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n}\n.base:not(.size-condensed, .size-expanded) .initials {\n  font: var(--vvd-typography-base-extended-bold);\n}\n.base:not(.size-condensed, .size-expanded) .icon {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2))) / 2);\n  line-height: 1;\n}\n.base:not(.shape-pill) {\n  border-radius: 6px;\n}\n.base.shape-pill {\n  border-radius: 50%;\n}\n.base .initials {\n  text-transform: uppercase;\n}\n.base ::slotted(*) {\n  block-size: 100%;\n  inline-size: 100%;\n  object-fit: cover;\n}";

class Avatar extends FoundationElement {}
__decorate([attr, __metadata("design:type", String)], Avatar.prototype, "connotation", void 0);
__decorate([attr, __metadata("design:type", String)], Avatar.prototype, "shape", void 0);
__decorate([attr, __metadata("design:type", String)], Avatar.prototype, "appearance", void 0);
__decorate([attr, __metadata("design:type", String)], Avatar.prototype, "size", void 0);
__decorate([attr, __metadata("design:type", String)], Avatar.prototype, "icon", void 0);
__decorate([attr, __metadata("design:type", String)], Avatar.prototype, "initials", void 0);

let _ = t => t,
  _t,
  _t2,
  _t3;
const getClasses = ({
  appearance,
  connotation,
  shape,
  size
}) => classNames('base', [`connotation-${connotation}`, Boolean(connotation)], [`appearance-${appearance}`, Boolean(appearance)], [`shape-${shape}`, Boolean(shape)], [`size-${size}`, Boolean(size)]);
function renderIcon(iconTag) {
  return html(_t || (_t = _`
		<span class="icon">
			<${0} name="${0}"></${0}>
		</span>
	`), iconTag, x => x.icon ? `${x.icon}` : 'user-line', iconTag);
}
function renderInitials() {
  return html(_t2 || (_t2 = _`
		<span class="initials">${0}</span>
	`), ({
    initials
  }) => initials.substring(0, 2));
}
const AvatarTemplate = context => {
  const iconTag = context.tagFor(Icon);
  return html(_t3 || (_t3 = _`
	<span class="${0}">
		<slot name="graphic">
			${0}
			${0}
		</slot>
</span>`), getClasses, when(x => x.initials, renderInitials()), when(x => !x.initials, renderIcon(iconTag)));
};

const avatarDefinition = Avatar.compose({
  baseName: 'avatar',
  template: AvatarTemplate,
  styles: css_248z
});
const avatarRegistries = [avatarDefinition(), ...iconRegistries];
const registerAvatar = registerFactory(avatarRegistries);

export { avatarDefinition as a, avatarRegistries as b, registerAvatar as r };
