import { F as FoundationElement, U as __classPrivateFieldGet, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { f as focusRegistries } from './definition4.js';
import { b as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { f as focusTemplateFactory } from './focus2.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var _Tag_select;
class Tag extends FoundationElement {
  constructor() {
    super(...arguments);
    this.removable = false;
    this.disabled = false;
    this.selectable = false;
    this.selected = false;
    _Tag_select.set(this, () => {
      if (!this.selectable || this.disabled) {
        return;
      }
      this.selected = !this.selected;
      this.$emit('selected-change');
    });
  }
  remove() {
    if (!this.removable || this.selectable) {
      return;
    }
    this.$emit('removed');
    this.parentElement && this.parentElement.removeChild(this);
  }
  handleKeydown(e) {
    if (e.key === 'Enter') {
      __classPrivateFieldGet(this, _Tag_select, "f").call(this);
    }
    if (e.key === 'Delete' || e.key === 'Backspace') {
      this.remove();
    }
    return true;
  }
  handleClick() {
    __classPrivateFieldGet(this, _Tag_select, "f").call(this);
  }
}
_Tag_select = new WeakMap();
__decorate([attr, __metadata("design:type", String)], Tag.prototype, "connotation", void 0);
__decorate([attr, __metadata("design:type", String)], Tag.prototype, "shape", void 0);
__decorate([attr, __metadata("design:type", String)], Tag.prototype, "appearance", void 0);
__decorate([attr, __metadata("design:type", String)], Tag.prototype, "label", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Tag.prototype, "removable", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Tag.prototype, "disabled", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Tag.prototype, "selectable", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Tag.prototype, "selected", void 0);
applyMixins(Tag, AffixIcon);

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  --tag-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n  position: relative;\n  display: inline-flex;\n  box-sizing: border-box;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  block-size: var(--tag-block-size);\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  column-gap: 8px;\n  font: var(--vvd-typography-base);\n  max-inline-size: 100%;\n  padding-inline: 8px;\n  vertical-align: middle;\n  /* Shape */\n}\n.base.connotation-cta {\n  --_connotation-color-contrast: var(--vvd-color-cta-800);\n  --_connotation-color-soft: var(--vvd-color-cta-100);\n  --_connotation-color-pale: var(--vvd-color-cta-300);\n  --_connotation-color-fierce: var(--vvd-color-cta-700);\n  --_connotation-color-firm: var(--vvd-color-cta-600);\n  --_connotation-color-faint: var(--vvd-color-cta-50);\n  --_connotation-color-dim: var(--vvd-color-cta-200);\n}\n.base:not(.connotation-cta) {\n  --_connotation-color-contrast: var(--vvd-color-neutral-800);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n  --_connotation-color-pale: var(--vvd-color-neutral-300);\n  --_connotation-color-fierce: var(--vvd-color-neutral-700);\n  --_connotation-color-firm: var(--vvd-color-canvas-text);\n  --_connotation-color-faint: var(--vvd-color-neutral-50);\n  --_connotation-color-dim: var(--vvd-color-neutral-200);\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.base.appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.base:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)).appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-dim);\n  --_appearance-color-outline: transparent;\n}\n.base:where(:active, .active):where(:not(:disabled, .disabled)).appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-400);\n  --_appearance-color-fill: var(--vvd-color-neutral-200);\n  --_appearance-color-outline: transparent;\n}\n.base:where(:disabled, .disabled).appearance-duotone {\n  --_appearance-color-text: var(--vvd-color-neutral-400);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--vvd-color-neutral-200);\n}\n.base:where(.selected, [aria-current]):where(:not(:disabled, .disabled, :hover, .hover)) {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-pale);\n  --_appearance-color-outline: transparent;\n}\n.base:where(.selected, [aria-current]):where(:not(:disabled, .disabled, :hover, .hover)).appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base:not(.shape-pill) {\n  border-radius: 4px;\n}\n.base.shape-pill {\n  border-radius: 14px;\n}\n@supports selector(:focus-visible) {\n  .base:focus {\n    outline: none;\n  }\n}\n@supports (user-select: none) {\n  .base {\n    user-select: none;\n  }\n}\n.base:not(.disabled) {\n  cursor: pointer;\n}\n.base.disabled {\n  cursor: not-allowed;\n  pointer-events: none;\n}\n.base.removable {\n  cursor: auto;\n}\n\n.label {\n  overflow: hidden;\n  max-inline-size: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.icon {\n  font-size: calc(var(--tag-block-size) / 1.5);\n  line-height: 1;\n}\n.icon > * {\n  vertical-align: middle;\n}\n\n.dismiss-button {\n  display: flex;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  border-radius: inherit;\n  cursor: pointer;\n}\n\n.base:not(:focus-visible) .focus-indicator {\n  display: none;\n}";

let _ = t => t,
  _t,
  _t2,
  _t3,
  _t4;
const getClasses = ({
  connotation,
  appearance,
  shape,
  disabled,
  selectable,
  removable,
  selected
}) => classNames('base', ['disabled', disabled], ['selectable', selectable], ['active', selectable && selected], ['removable', removable && !selectable], [`connotation-${connotation}`, Boolean(connotation)], [`appearance-${appearance}`, Boolean(appearance)], [`shape-${shape}`, Boolean(shape)]);
function renderDismissButton(iconTag) {
  return html(_t || (_t = _`
	<span 
		aria-hidden="true"
		class="dismiss-button"
		@click="${0}">
		<${0} name="close-line"></${0}>
	</span>`), x => x.remove(), iconTag, iconTag);
}
const tagTemplate = context => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const iconTag = context.tagFor(Icon);
  const focusTemplate = focusTemplateFactory(context);
  return html(_t2 || (_t2 = _`
	<span class="${0}" 
	role="option"
	aria-disabled="${0}"
	aria-selected="${0}"
	tabindex="${0}"
	@keydown="${0}"
	@click="${0}">
		${0}
		${0}
		${0}
		${0}
		${0}
	</span>`), getClasses, x => x.disabled, x => x.selectable, x => x.disabled ? null : 0, (x, c) => x.handleKeydown(c.event), x => x.handleClick(), x => affixIconTemplate(x.icon), when(x => x.label, x => html(_t3 || (_t3 = _`<span class="label">${0}</span>`), x.label)), when(x => x.removable && !x.selectable, renderDismissButton(iconTag)), when(x => x.selectable && x.selected, html(_t4 || (_t4 = _`<${0} class="selectable-icon" name="check-line"></${0}>`), iconTag, iconTag)), () => focusTemplate);
};

const tagDefinition = Tag.compose({
  baseName: 'tag',
  template: tagTemplate,
  styles: css_248z,
  shadowOptions: {
    delegatesFocus: true
  }
});
const tagRegistries = [tagDefinition(), ...iconRegistries, ...focusRegistries];
const registerTag = registerFactory(tagRegistries);

export { registerTag as r, tagDefinition as t };
