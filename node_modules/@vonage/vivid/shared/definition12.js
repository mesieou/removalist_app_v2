import { F as FoundationElement, U as __classPrivateFieldGet, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { B as Button, b as buttonRegistries } from './definition7.js';
import { i as iconRegistries } from './definition3.js';
import { C as Connotation } from './enums.js';
import { b as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.control {\n  overflow: hidden;\n  max-height: 160px;\n  background-color: var(--_appearance-color-fill);\n  color: var(--_appearance-color-text);\n  transition: max-height var(--transition-delay, 200ms);\n}\n.control.connotation-success {\n  --_connotation-color-primary: var(--vvd-color-success-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.control.connotation-alert {\n  --_connotation-color-primary: var(--vvd-color-alert-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.control.connotation-announcement {\n  --_connotation-color-primary: var(--vvd-color-announcement-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.control.connotation-warning {\n  --_connotation-color-primary: var(--vvd-color-warning-300);\n  --_connotation-color-primary-text: var(--vvd-color-canvas-text);\n}\n.control:not(.connotation-success, .connotation-alert, .connotation-announcement, .connotation-warning) {\n  --_connotation-color-primary: var(--vvd-color-information-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.control {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.control.removing {\n  max-height: 0;\n}\n\n.header {\n  display: flex;\n  min-height: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 20));\n  align-items: center;\n  font: var(--vvd-typography-base-bold);\n  inline-size: 100%;\n}\n.header .content {\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  justify-content: center;\n  column-gap: 16px;\n  inline-size: 100%;\n  padding-inline: 16px;\n}\n.header .content .icon {\n  flex-shrink: 0;\n  font-size: 20px;\n  line-height: 1;\n}\n.header .content .action-items {\n  flex-shrink: 0;\n}\n.header .dismiss-button {\n  flex-shrink: 0;\n  margin-inline-end: 8px;\n}";

var _Banner_handleRemoveEnd, _Banner_closeOnKeyDown;
const connotationIconMap = new Map([[Connotation.Information, 'info-solid'], [Connotation.Announcement, 'megaphone-solid'], [Connotation.Success, 'check-circle-solid'], [Connotation.Warning, 'warning-solid'], [Connotation.Alert, 'error-solid']]);
const defaultConnotation = (connotation = Connotation.Information) => connotationIconMap.get(connotation);
class Banner extends FoundationElement {
  constructor() {
    super(...arguments);
    this.removable = false;
    _Banner_handleRemoveEnd.set(this, () => {
      this.$emit('removed');
      this.parentElement && this.parentElement.removeChild(this);
    });
    _Banner_closeOnKeyDown.set(this, e => {
      if (e.key !== 'Escape' || !this.removable) {
        return;
      }
      this.remove();
    });
  }
  get conditionedIcon() {
    var _a;
    return (_a = this.icon) !== null && _a !== void 0 ? _a : defaultConnotation(this.connotation);
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener('keydown', __classPrivateFieldGet(this, _Banner_closeOnKeyDown, "f"));
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener('keydown', __classPrivateFieldGet(this, _Banner_closeOnKeyDown, "f"));
  }
  remove() {
    this.$emit('removing');
    const banner = this.shadowRoot && this.shadowRoot.querySelector('.control');
    if (banner) {
      banner.classList.add('removing');
      banner.addEventListener('transitionend', __classPrivateFieldGet(this, _Banner_handleRemoveEnd, "f"));
    }
  }
}
_Banner_handleRemoveEnd = new WeakMap(), _Banner_closeOnKeyDown = new WeakMap();
__decorate([attr({
  attribute: 'action-href'
}), __metadata("design:type", Object)], Banner.prototype, "actionHref", void 0);
__decorate([attr({
  attribute: 'action-text'
}), __metadata("design:type", Object)], Banner.prototype, "actionText", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Banner.prototype, "removable", void 0);
__decorate([attr({
  attribute: 'aria-live'
}), __metadata("design:type", Object)], Banner.prototype, "ariaLive", void 0);
__decorate([attr(), __metadata("design:type", Object)], Banner.prototype, "role", void 0);
__decorate([attr(), __metadata("design:type", Object)], Banner.prototype, "text", void 0);
__decorate([attr(), __metadata("design:type", Object)], Banner.prototype, "connotation", void 0);
applyMixins(Banner, AffixIcon);

let _2 = t => t,
  _t,
  _t2;
const getClasses = _ => classNames('control', [`connotation-${_.connotation}`, !!_.connotation]);
function renderDismissButton(buttonTag) {
  return html(_t || (_t = _2`
	  <${0}
				part="vvd-theme-alternate"
			  size="condensed"
			  class="dismiss-button"
			  icon="close-line"
			  @click="${0}">
	  </${0}>`), buttonTag, x => x.remove(), buttonTag);
}
const BannerTemplate = context => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const buttonTag = context.tagFor(Button);
  return html(_t2 || (_t2 = _2`
	  <div class="${0}" tabindex="0">
		  <header class="header">
					<div class="content">
            ${0}
						<div class="banner-message"
						 role="${0}"
						 aria-live="${0}">
									${0}
            </div>
						<slot class="action-items" name="action-items"></slot>
					</div>

			  ${0}
		  </header>
	  </div>
	`), getClasses, x => affixIconTemplate(x.conditionedIcon), x => x.role ? x.role : 'status', x => x.ariaLive ? x.ariaLive : 'polite', x => x.text, when(x => x.removable, renderDismissButton(buttonTag)));
};

const bannerDefinition = Banner.compose({
  baseName: 'banner',
  template: BannerTemplate,
  styles: css_248z
});
const bannerRegistries = [bannerDefinition(), ...iconRegistries, ...buttonRegistries];
const registerBanner = registerFactory(bannerRegistries);

export { bannerRegistries as a, bannerDefinition as b, registerBanner as r };
