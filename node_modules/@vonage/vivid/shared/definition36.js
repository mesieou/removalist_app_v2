import { c as classofRaw, G as _export, k as functionUncurryThis, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { B as BaseProgress } from './base-progress.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  height: 6px;\n  align-items: center;\n  margin: 0;\n  outline: none;\n}\n.base:not(.connotation-pacific).connotation-cta {\n  --_connotation-color-primary: var(--vvd-color-cta-500);\n  --_connotation-color-soft: var(--vvd-color-cta-100);\n}\n.base:not(.connotation-pacific).connotation-alert {\n  --_connotation-color-primary: var(--vvd-color-alert-500);\n  --_connotation-color-soft: var(--vvd-color-alert-100);\n}\n.base:not(.connotation-pacific).connotation-success {\n  --_connotation-color-primary: var(--vvd-color-success-500);\n  --_connotation-color-soft: var(--vvd-color-success-100);\n}\n.base:not(.connotation-pacific):not(.connotation-cta, .connotation-alert, .connotation-success) {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n}\n.base:not(.connotation-pacific) {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.base.connotation-pacific {\n  --_connotation-color-primary: linear-gradient(to right, var(--vvd-color-information-200), var(--vvd-color-cta-600));\n}\n\n.progress {\n  position: relative;\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  block-size: 100%;\n  inline-size: 100%;\n  /* Shape */\n}\n.base:not(.connotation-pacific) .progress {\n  background-color: var(--_appearance-color-fill);\n}\n.base.connotation-pacific .progress {\n  background-color: var(--vvd-color-neutral-100);\n}\n.base:not(.shape-sharp) .progress {\n  border-radius: 3px;\n}\n\n.indeterminate {\n  display: flex;\n  background-color: var(--_connotation-color-primary);\n  block-size: 100%;\n  border-radius: inherit;\n  inline-size: 100%;\n}\n\n.determinate {\n  background-color: var(--_connotation-color-primary);\n  block-size: 100%;\n  border-radius: inherit;\n  transition: all 0.2s ease-in-out;\n}\n.connotation-pacific .determinate {\n  background-image: var(--_connotation-color-primary);\n}\n.reverse .determinate {\n  position: absolute;\n  right: 0;\n}\n.paused .determinate {\n  background: var(--vvd-color-neutral-300);\n}\n\n.indicator-1 {\n  animation: indeterminate-1 2s infinite;\n  inline-size: 30%;\n}\n\n.indicator-2 {\n  animation: indeterminate-2 2s infinite;\n  inline-size: 60%;\n}\n\n.indicator-1,\n.indicator-2 {\n  position: absolute;\n  animation-timing-function: cubic-bezier(0.4, 0, 0.6, 1);\n  background-color: var(--vvd-color-neutral-100);\n  block-size: 100%;\n  opacity: 0;\n}\n.connotation-pacific .indicator-1,\n.connotation-pacific .indicator-2 {\n  background-image: var(--_connotation-color-primary);\n}\n.paused .indicator-1,\n.paused .indicator-2 {\n  animation-play-state: paused;\n  background-color: var(--_connotation-color-primary);\n}\n.reverse .indicator-1,\n.reverse .indicator-2 {\n  animation-direction: reverse;\n}\n\n@keyframes indeterminate-1 {\n  0% {\n    opacity: 1;\n    transform: translateX(-100%);\n  }\n  70% {\n    opacity: 1;\n    transform: translateX(300%);\n  }\n  70.01% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0;\n    transform: translateX(300%);\n  }\n}\n@keyframes indeterminate-2 {\n  0% {\n    opacity: 0;\n    transform: translateX(-150%);\n  }\n  29.99% {\n    opacity: 0;\n  }\n  30% {\n    opacity: 1;\n    transform: translateX(-150%);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(166.66%);\n  }\n}";

var classof = classofRaw;

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
var isArray$1 = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};

var $ = _export;
var uncurryThis = functionUncurryThis;
var isArray = isArray$1;

var nativeReverse = uncurryThis([].reverse);
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.es/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign -- dirty hack
    if (isArray(this)) this.length = this.length;
    return nativeReverse(this);
  }
});

class Progress extends BaseProgress {
  constructor() {
    super(...arguments);
    this.reverse = false;
  }
}
__decorate([attr(), __metadata("design:type", String)], Progress.prototype, "shape", void 0);
__decorate([attr(), __metadata("design:type", String)], Progress.prototype, "connotation", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Progress.prototype, "reverse", void 0);

let _2 = t => t,
  _t,
  _t2,
  _t3;
const getClasses = ({
  connotation,
  shape,
  reverse,
  paused
}) => classNames('base', [`connotation-${connotation}`, Boolean(connotation)], [`shape-${shape}`, Boolean(shape)], ['reverse', Boolean(reverse)], ['paused', Boolean(paused)]);
function determinate() {
  return html(_t || (_t = _2`
		<span class="determinate" style="width: ${0}%"></span>`), x => x.percentComplete);
}
function indeterminate() {
  return html(_t2 || (_t2 = _2`
		<span class="indeterminate" name="indeterminate">
			<span class="indicator-1"></span>
			<span class="indicator-2"></span>
		 </span>`));
}
const ProgressTemplate = _ => {
  return html(_t3 || (_t3 = _2`
    <div
      role="progressbar"
      aria-valuenow="${0}"
      aria-valuemin="${0}"
      aria-valuemax="${0}"
      class="${0}"
    >
		<div class="progress">
		  ${0}
		  ${0}
    	</div>
	</div>
  `), x => x.value, x => x.min, x => x.max, getClasses, when(x => typeof x.value === 'number', determinate()), when(x => typeof x.value !== 'number', indeterminate()));
};

const progressDefinition = Progress.compose({
  baseName: 'progress',
  template: ProgressTemplate,
  styles: css_248z
});
const progressRegistries = [progressDefinition()];
const registerProgress = registerFactory(progressRegistries);

export { progressRegistries as a, progressDefinition as p, registerProgress as r };
