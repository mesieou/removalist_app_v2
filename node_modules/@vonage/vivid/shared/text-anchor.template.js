import { a as affixIconTemplateFactory } from './affix.js';
import { f as focusTemplateFactory } from './focus2.js';
import { h as html } from './index.js';
import { r as ref } from './ref.js';
import { c as classNames } from './class-names.js';

let _ = t => t,
  _t;
const getClasses = ({
  text,
  icon
}) => classNames('control', ['icon-only', !text && !!icon]);
const textAnchorTemplate = context => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  return html(_t || (_t = _`<a
        class="${0}"
        download="${0}"
        href="${0}"
        hreflang="${0}"
        ping="${0}"
        referrerpolicy="${0}"
        rel="${0}"
        target="${0}"
        type="${0}"
        aria-atomic="${0}"
        aria-busy="${0}"
        aria-controls="${0}"
        aria-current="${0}"
        aria-describedby="${0}"
        aria-details="${0}"
        aria-disabled="${0}"
        aria-errormessage="${0}"
        aria-expanded="${0}"
        aria-flowto="${0}"
        aria-haspopup="${0}"
        aria-hidden="${0}"
        aria-invalid="${0}"
        aria-keyshortcuts="${0}"
        aria-label="${0}"
        aria-labelledby="${0}"
        aria-live="${0}"
        aria-owns="${0}"
        aria-relevant="${0}"
        aria-roledescription="${0}"
        ${0}
    >
      ${0}
      ${0}
      ${0}
    </a>
`), getClasses, x => x.download, x => x.href, x => x.hreflang, x => x.ping, x => x.referrerpolicy, x => x.rel, x => x.target, x => x.type, x => x.ariaAtomic, x => x.ariaBusy, x => x.ariaControls, x => x.ariaCurrent, x => x.ariaDescribedby, x => x.ariaDetails, x => x.ariaDisabled, x => x.ariaErrormessage, x => x.ariaExpanded, x => x.ariaFlowto, x => x.ariaHaspopup, x => x.ariaHidden, x => x.ariaInvalid, x => x.ariaKeyshortcuts, x => x.ariaLabel, x => x.ariaLabelledby, x => x.ariaLive, x => x.ariaOwns, x => x.ariaRelevant, x => x.ariaRoledescription, ref('control'), () => focusTemplate, x => affixIconTemplate(x.icon), x => x.text);
};

export { textAnchorTemplate as t };
