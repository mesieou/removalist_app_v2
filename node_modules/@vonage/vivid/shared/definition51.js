import { F as FoundationElement, U as __classPrivateFieldGet, W as __classPrivateFieldSet, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { P as Popup, p as popupRegistries } from './definition20.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.control {\n  pointer-events: none;\n}\n\n.tooltip {\n  width: var(--tooltip-inline-size, auto);\n}\n.tooltip-text {\n  padding: 8px 12px;\n  color: var(--vvd-color-canvas-text);\n  font: var(--vvd-typography-base-bold);\n}";

var _Tooltip_instances, _Tooltip_anchorEl, _Tooltip_anchorUpdated, _Tooltip_addEventListener, _Tooltip_removeEventListener, _Tooltip_show, _Tooltip_hide, _Tooltip_closeOnEscape;
class Tooltip extends FoundationElement {
  constructor() {
    super(...arguments);
    _Tooltip_instances.add(this);
    _Tooltip_anchorEl.set(this, null);
    this.open = false;
    _Tooltip_show.set(this, () => {
      this.open = true;
    });
    _Tooltip_hide.set(this, () => {
      this.open = false;
    });
    _Tooltip_closeOnEscape.set(this, e => {
      if (e.key === 'Escape') __classPrivateFieldGet(this, _Tooltip_hide, "f").call(this);
    });
  }
  anchorChanged(_, newValue) {
    if (__classPrivateFieldGet(this, _Tooltip_anchorEl, "f")) __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_removeEventListener).call(this);
    __classPrivateFieldSet(this, _Tooltip_anchorEl, newValue instanceof HTMLElement ? newValue : document.getElementById(newValue), "f");
    if (__classPrivateFieldGet(this, _Tooltip_anchorEl, "f")) __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_anchorUpdated).call(this);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_removeEventListener).call(this);
    document.removeEventListener('keydown', __classPrivateFieldGet(this, _Tooltip_closeOnEscape, "f"));
  }
  openChanged(_, newValue) {
    if (_ === undefined) return;
    if (newValue) {
      document.addEventListener('keydown', __classPrivateFieldGet(this, _Tooltip_closeOnEscape, "f"));
    } else {
      document.removeEventListener('keydown', __classPrivateFieldGet(this, _Tooltip_closeOnEscape, "f"));
    }
  }
}
_Tooltip_anchorEl = new WeakMap(), _Tooltip_show = new WeakMap(), _Tooltip_hide = new WeakMap(), _Tooltip_closeOnEscape = new WeakMap(), _Tooltip_instances = new WeakSet(), _Tooltip_anchorUpdated = function _Tooltip_anchorUpdated() {
  __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_removeEventListener).call(this);
  __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_addEventListener).call(this);
}, _Tooltip_addEventListener = function _Tooltip_addEventListener() {
  if (__classPrivateFieldGet(this, _Tooltip_anchorEl, "f")) {
    __classPrivateFieldGet(this, _Tooltip_anchorEl, "f").addEventListener('mouseover', __classPrivateFieldGet(this, _Tooltip_show, "f"));
    __classPrivateFieldGet(this, _Tooltip_anchorEl, "f").addEventListener('mouseout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
    __classPrivateFieldGet(this, _Tooltip_anchorEl, "f").addEventListener('focusin', __classPrivateFieldGet(this, _Tooltip_show, "f"));
    __classPrivateFieldGet(this, _Tooltip_anchorEl, "f").addEventListener('focusout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
  }
}, _Tooltip_removeEventListener = function _Tooltip_removeEventListener() {
  var _a, _b, _c, _d;
  (_a = __classPrivateFieldGet(this, _Tooltip_anchorEl, "f")) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseover', __classPrivateFieldGet(this, _Tooltip_show, "f"));
  (_b = __classPrivateFieldGet(this, _Tooltip_anchorEl, "f")) === null || _b === void 0 ? void 0 : _b.removeEventListener('mouseout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
  (_c = __classPrivateFieldGet(this, _Tooltip_anchorEl, "f")) === null || _c === void 0 ? void 0 : _c.removeEventListener('focusin', __classPrivateFieldGet(this, _Tooltip_show, "f"));
  (_d = __classPrivateFieldGet(this, _Tooltip_anchorEl, "f")) === null || _d === void 0 ? void 0 : _d.removeEventListener('focusout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
};
__decorate([attr, __metadata("design:type", String)], Tooltip.prototype, "text", void 0);
__decorate([attr({
  mode: 'fromView'
}), __metadata("design:type", String)], Tooltip.prototype, "placement", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Tooltip.prototype, "open", void 0);
__decorate([attr({
  mode: 'fromView'
}), __metadata("design:type", Object)], Tooltip.prototype, "anchor", void 0);

let _ = t => t,
  _t;
const getClasses = ({
  open
}) => classNames('control', ['open', Boolean(open)]);
const TooltipTemplate = context => {
  const popupTag = context.tagFor(Popup);
  return html(_t || (_t = _`
<${0} class="${0}" arrow alternate
	:placement=${0}
	:anchor="${0}"
	:open=${0}
  exportparts="vvd-theme-alternate">
  <div class="tooltip" role="tooltip">
    <header part="vvd-theme-alternate" class="tooltip-header">
      <div class="tooltip-text">${0}</div>
    </header>
  </div>
</${0}>`), popupTag, getClasses, x => x.placement, x => x.anchor, x => x.open, x => x.text, popupTag);
};

const tooltipDefinition = Tooltip.compose({
  baseName: 'tooltip',
  template: TooltipTemplate,
  styles: css_248z
});
const tooltipRegistries = [tooltipDefinition(), ...popupRegistries];
const registerTooltip = registerFactory(tooltipRegistries);

export { tooltipRegistries as a, registerTooltip as r, tooltipDefinition as t };
