import { F as FoundationElement, U as __classPrivateFieldGet, _ as __decorate, a as attr, b as __metadata, o as observable, W as __classPrivateFieldSet, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { B as Button, b as buttonRegistries } from './definition7.js';
import { E as Elevation, e as elevationRegistries } from './definition8.js';
import { I as Icon } from './icon.js';
import { s as slotted } from './slotted.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z$1 = "dialog {\n  position: absolute;\n  left: 0; right: 0;\n  width: -moz-fit-content;\n  width: -webkit-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: -webkit-fit-content;\n  height: fit-content;\n  margin: auto;\n  border: solid;\n  padding: 1em;\n  background: white;\n  color: black;\n  display: block;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\ndialog + .backdrop {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n  background: rgba(0,0,0,0.1);\n}\n\n._dialog_overlay {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n}\n\ndialog.fixed {\n  position: fixed;\n  top: 50%;\n  transform: translate(0, -50%);\n}";

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  box-sizing: border-box;\n  padding: 0;\n  border: none;\n  background: var(--_elevation-fill);\n  border-radius: 6px;\n  color: var(--vvd-color-canvas-text);\n  max-block-size: var(--dialog-max-block-size, calc(100vh - 64px));\n  max-inline-size: var(--dialog-max-inline-size, var(--_dialog-default-max-inline-size));\n  min-inline-size: var(--dialog-min-inline-size, 280px);\n}\n@media not all and (min-width: 600px) {\n  .base {\n    --_dialog-default-max-inline-size: 90vw;\n  }\n}\n@media (min-width: 600px) {\n  .base {\n    --_dialog-default-max-inline-size: 560px;\n  }\n}\n.base:not(.modal) {\n  z-index: var(--dialog-z-index, 1);\n}\n.base.modal::backdrop {\n  background-color: var(--vvd-color-canvas-text, currentColor);\n  opacity: 0.5;\n}\n\n.main-wrapper {\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  gap: 24px;\n  padding-block: 24px;\n}\n.main-wrapper > * {\n  box-sizing: border-box;\n}\n\n.header {\n  display: grid;\n  align-items: flex-start;\n  justify-content: space-between;\n  inline-size: 100%;\n  padding-inline: 24px;\n}\n.base:not(.icon-placement-side) .header {\n  grid-template-columns: 1fr auto;\n  grid-template-rows: auto auto auto;\n}\n.base:not(.icon-placement-side) .header .icon {\n  font-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n  grid-column: 1/2;\n  grid-row: 1/2;\n  line-height: 1;\n  margin-block-end: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n}\n.base.icon-placement-side .header {\n  grid-template-columns: auto 1fr auto;\n  grid-template-rows: auto auto;\n}\n.base.icon-placement-side .header .icon {\n  font-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 12));\n}\n.base.icon-placement-side .header ::slotted(*),\n.base.icon-placement-side .header .icon {\n  grid-column: 1/2;\n  grid-row: 1/-1;\n  margin-inline-end: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8)) / 2);\n}\n.header.border {\n  position: relative;\n}\n.header.border::after {\n  position: absolute;\n  bottom: -24px;\n  left: 0;\n  background-color: var(--vvd-color-neutral-200);\n  block-size: 1px;\n  content: \"\";\n  inline-size: 100%;\n}\n.base.hide-body .header.border::after {\n  content: none;\n}\n\n.body:not(.full-width) {\n  padding-inline: 24px;\n}\n.hide-body .body {\n  display: none;\n}\n\n.footer {\n  padding-inline: 24px;\n}\n.hide-footer .footer {\n  display: none;\n}\n\n.dismiss-button {\n  flex-shrink: 0;\n  grid-column: -2/-1;\n  grid-row: 1/-1;\n  margin-block-start: -8px;\n  margin-inline-end: -8px;\n  margin-inline-start: 4px;\n}\n\n.headline {\n  font: var(--vvd-typography-heading-4);\n}\n\n.subtitle {\n  font: var(--vvd-typography-base);\n}\n\nslot[name=main] {\n  display: block;\n  overflow: hidden auto;\n  max-width: inherit;\n  max-height: inherit;\n  border-radius: inherit;\n}";

var _Dialog_instances, _Dialog_modal, _Dialog_dialogElement, _Dialog_dialog_get, _Dialog_handleScrimClick, _Dialog_handleInternalFormSubmit, _Dialog_handleModal;
let dialogPolyfill;
(async () => {
  if (!HTMLDialogElement || !HTMLDialogElement.prototype.showModal) {
    delete window.HTMLDialogElement;
    dialogPolyfill = await import('./dialog-polyfill.esm.js');
  }
})();
class Dialog extends FoundationElement {
  constructor() {
    super(...arguments);
    _Dialog_instances.add(this);
    this.open = false;
    this.fullWidthBody = false;
    this.ariaLabelledBy = null;
    this.ariaLabel = null;
    this.ariaDescribedBy = null;
    _Dialog_modal.set(this, false);
    _Dialog_dialogElement.set(this, void 0);
    _Dialog_handleScrimClick.set(this, event => {
      if (event.target !== __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get)) {
        return;
      }
      const rect = __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).getBoundingClientRect();
      const clickedInDialog = rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
      this.open = clickedInDialog;
    });
    _Dialog_handleInternalFormSubmit.set(this, event => {
      if (event.target.method !== 'dialog') {
        return;
      }
      this.open = false;
    });
  }
  set returnValue(value) {
    __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).returnValue = value;
  }
  get returnValue() {
    var _a;
    return (_a = __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get)) === null || _a === void 0 ? void 0 : _a.returnValue;
  }
  get modal() {
    return __classPrivateFieldGet(this, _Dialog_modal, "f");
  }
  openChanged(oldValue, newValue) {
    if (oldValue === undefined) {
      return;
    }
    if (!newValue) {
      this.close();
    } else {
      if (__classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get)) {
        __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).open = true;
      }
    }
  }
  close() {
    if (__classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).open) {
      __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).close();
      this.$emit('close', this.returnValue, {
        bubbles: false
      });
    }
    this.open = false;
    __classPrivateFieldGet(this, _Dialog_instances, "m", _Dialog_handleModal).call(this, false);
  }
  show() {
    __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).show();
    this.open = true;
  }
  showModal() {
    __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).showModal();
    this.open = true;
    __classPrivateFieldGet(this, _Dialog_instances, "m", _Dialog_handleModal).call(this, true);
  }
  connectedCallback() {
    super.connectedCallback();
    __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).addEventListener('click', __classPrivateFieldGet(this, _Dialog_handleScrimClick, "f"));
    __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).addEventListener('submit', __classPrivateFieldGet(this, _Dialog_handleInternalFormSubmit, "f"));
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).removeEventListener('click', __classPrivateFieldGet(this, _Dialog_handleScrimClick, "f"));
    __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).removeEventListener('submit', __classPrivateFieldGet(this, _Dialog_handleInternalFormSubmit, "f"));
  }
}
_Dialog_modal = new WeakMap(), _Dialog_dialogElement = new WeakMap(), _Dialog_handleScrimClick = new WeakMap(), _Dialog_handleInternalFormSubmit = new WeakMap(), _Dialog_instances = new WeakSet(), _Dialog_dialog_get = function _Dialog_dialog_get() {
  if (!__classPrivateFieldGet(this, _Dialog_dialogElement, "f")) {
    __classPrivateFieldSet(this, _Dialog_dialogElement, this.shadowRoot.querySelector('dialog'), "f");
    if (__classPrivateFieldGet(this, _Dialog_dialogElement, "f")) {
      __classPrivateFieldGet(this, _Dialog_dialogElement, "f").open = this.open;
      if (dialogPolyfill) {
        dialogPolyfill.registerDialog(__classPrivateFieldGet(this, _Dialog_dialogElement, "f"));
      }
    }
  }
  return __classPrivateFieldGet(this, _Dialog_dialogElement, "f");
}, _Dialog_handleModal = function _Dialog_handleModal(show) {
  __classPrivateFieldSet(this, _Dialog_modal, show, "f");
  __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).toggleAttribute('aria-modal', show);
  __classPrivateFieldGet(this, _Dialog_instances, "a", _Dialog_dialog_get).classList.toggle('modal', show);
};
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Dialog.prototype, "open", void 0);
__decorate([attr, __metadata("design:type", String)], Dialog.prototype, "icon", void 0);
__decorate([attr({
  attribute: 'icon-placement'
}), __metadata("design:type", String)], Dialog.prototype, "iconPlacement", void 0);
__decorate([attr, __metadata("design:type", String)], Dialog.prototype, "subtitle", void 0);
__decorate([attr, __metadata("design:type", String)], Dialog.prototype, "headline", void 0);
__decorate([attr({
  attribute: 'full-width-body',
  mode: 'boolean'
}), __metadata("design:type", Object)], Dialog.prototype, "fullWidthBody", void 0);
__decorate([attr({
  attribute: 'aria-labelledby'
}), __metadata("design:type", Object)], Dialog.prototype, "ariaLabelledBy", void 0);
__decorate([attr({
  attribute: 'aria-label'
}), __metadata("design:type", Object)], Dialog.prototype, "ariaLabel", void 0);
__decorate([attr({
  attribute: 'aria-describedby'
}), __metadata("design:type", Object)], Dialog.prototype, "ariaDescribedBy", void 0);
__decorate([observable, __metadata("design:type", Array)], Dialog.prototype, "bodySlottedContent", void 0);
__decorate([observable, __metadata("design:type", Array)], Dialog.prototype, "footerSlottedContent", void 0);

let _ = t => t,
  _t,
  _t2,
  _t3,
  _t4,
  _t5;
const getClasses = ({
  iconPlacement,
  bodySlottedContent,
  footerSlottedContent
}) => classNames('base', [`icon-placement-${iconPlacement}`, Boolean(iconPlacement)], ['hide-body', !(bodySlottedContent === null || bodySlottedContent === void 0 ? void 0 : bodySlottedContent.length)], ['hide-footer', !(footerSlottedContent === null || footerSlottedContent === void 0 ? void 0 : footerSlottedContent.length)]);
function icon(iconTag) {
  return html(_t || (_t = _`
		<${0} class="icon" name="${0}"></${0}>
	`), iconTag, x => x.icon, iconTag);
}
function headline() {
  return html(_t2 || (_t2 = _`
	  <div class="headline">
		  ${0}
	  </div>
	`), x => x.headline);
}
function subtitle() {
  return html(_t3 || (_t3 = _`
	  <div class="subtitle">
		  ${0}
	  </div>
	`), x => x.subtitle);
}
function renderDismissButton(buttonTag) {
  return html(_t4 || (_t4 = _`
	  <${0}
			  size="condensed"
			  class="dismiss-button"
			  icon="close-line"
			  @click="${0}">
	  </${0}>`), buttonTag, x => {
    x.open = false;
  }, buttonTag);
}
function handleEscapeKey(dialog, event) {
  if (event.key === 'Escape' && dialog.modal) {
    dialog.open = false;
  }
  return true;
}
const DialogTemplate = context => {
  const elevationTag = context.tagFor(Elevation);
  const iconTag = context.tagFor(Icon);
  const buttonTag = context.tagFor(Button);
  return html(_t5 || (_t5 = _`
	<${0} dp="8">
		<dialog class="${0}"
				@keydown="${0}"
				returnValue="${0}"
				aria-labelledby="${0}"
				aria-label="${0}"
				aria-describedby="${0}"
		>
			<slot name="main">
				<div class="main-wrapper">
					<div class="header ${0}">
							<slot name="graphic">
								${0}
							</slot>
							${0}
							${0}
							${0}
					</div>
					<div class="body ${0} ${0}" >
						<slot name="body" ${0}></slot>
					</div>
					<div class="footer ${0}">
						<slot name="footer" ${0}></slot>
					</div>
				</div>
			</slot>
		</dialog>
	</${0}>`), elevationTag, getClasses, (x, c) => handleEscapeKey(x, c.event), x => x.returnValue, x => x.ariaLabelledBy, x => x.ariaLabel, x => x.ariaDescribedBy, x => x.subtitle ? 'border' : '', when(x => x.icon, icon(iconTag)), when(x => x.headline, headline()), when(x => x.subtitle, subtitle()), renderDismissButton(buttonTag), x => {
    var _a;
    return ((_a = x.bodySlottedContent) === null || _a === void 0 ? void 0 : _a.length) ? '' : 'hide';
  }, x => x.fullWidthBody ? 'full-width' : '', slotted('bodySlottedContent'), x => {
    var _a;
    return ((_a = x.footerSlottedContent) === null || _a === void 0 ? void 0 : _a.length) ? '' : 'hide';
  }, slotted('footerSlottedContent'), elevationTag);
};

const dialogDefinition = Dialog.compose({
  baseName: 'dialog',
  template: DialogTemplate,
  styles: [css_248z, css_248z$1]
});
const dialogRegistries = [dialogDefinition(), ...iconRegistries, ...buttonRegistries, ...elevationRegistries];
const registerDialog = registerFactory(dialogRegistries);

export { dialogRegistries as a, dialogDefinition as d, registerDialog as r };
