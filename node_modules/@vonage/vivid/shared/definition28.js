import { h as html, r as registerFactory } from './index.js';
import { f as focusRegistries } from './definition4.js';
import { l as listboxOptionRegistries } from './definition21.js';
import { b as ListboxElement, a as Listbox } from './listbox.js';
import './affix.js';
import { f as focusTemplateFactory } from './focus2.js';
import './form-elements.js';
import { s as slotted } from './slotted.js';
import { c as classNames } from './class-names.js';

let _ = t => t,
  _t;
const getClasses = ({
  appearance,
  disabled
}) => classNames('base', ['disabled', disabled], [`appearance-${appearance}`, Boolean(appearance)]);
const ListboxTemplate = context => {
  const focusTemplate = focusTemplateFactory(context);
  return html(_t || (_t = _`
<template
	aria-activedescendant="${0}"
	aria-multiselectable="${0}"
	aria-label="listbox"
	role="listbox"
	@click="${0}"
	@focusin="${0}"
	@keydown="${0}"
	@mousedown="${0}"
	tabindex="${0}"
>
	<div
		class="${0}"
	>
		${0}

		<slot
			${0}
		></slot>
	</div>
</template>
	`), x => x.ariaActiveDescendant, x => x.ariaMultiSelectable, (x, c) => x.clickHandler(c.event), (x, c) => x.focusinHandler(c.event), (x, c) => x.keydownHandler(c.event), (x, c) => x.mousedownHandler(c.event), x => !x.disabled ? '0' : null, getClasses, () => focusTemplate, slotted({
    filter: ListboxElement.slottedOptionFilter,
    flatten: true,
    property: 'slottedOptions'
  }));
};

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n:host {\n  display: block;\n  inline-size: fit-content;\n}\n\n:host(:focus-within) {\n  outline: none;\n}\n\n.base {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 4px;\n  background-color: var(--_appearance-color-fill);\n  border-radius: 6px;\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  contain: paint;\n  gap: 4px;\n}\n.base {\n  --_connotation-color-backdrop: var(--vvd-color-canvas);\n  --_connotation-color-intermediate: var(--vvd-color-neutral-500);\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n}\n.base {\n  --_appearance-color-text: var(--vvd-color-canvas-text);\n  --_appearance-color-fill: var(--_connotation-color-backdrop);\n  --_appearance-color-outline: var(--_connotation-color-intermediate);\n}\n.base.appearance-ghost {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.base:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-400);\n  --_appearance-color-fill: var(--vvd-color-neutral-200);\n  --_appearance-color-outline: var(--vvd-color-neutral-400);\n}\n.base:where(:disabled, .disabled).appearance-ghost {\n  --_appearance-color-text: var(--vvd-color-neutral-400);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n\n.focus-indicator {\n  pointer-events: none;\n}\n:host(:not(:focus-within)) .focus-indicator {\n  display: none;\n}\n\n.base.disabled ::slotted([role=option]) {\n  --_option-appearance-color-text: var(--_appearance-color-outline);\n  cursor: not-allowed;\n  pointer-events: none;\n}";

const listboxDefinition = Listbox.compose({
  baseName: 'listbox',
  template: ListboxTemplate,
  styles: css_248z
});
const listboxRegistries = [listboxDefinition(), ...listboxOptionRegistries, ...focusRegistries];
const registerListbox = registerFactory(listboxRegistries);

export { listboxRegistries as a, listboxDefinition as l, registerListbox as r };
