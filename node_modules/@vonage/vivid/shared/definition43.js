import { F as FoundationElement, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { f as focusRegistries } from './definition4.js';
import { b as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { f as focusTemplateFactory } from './focus2.js';
import { c as classNames } from './class-names.js';

/**
 * A Tab Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}
 *
 * @slot - The default slot for the tab content
 *
 * @public
 */
class Tab$1 extends FoundationElement {
}
__decorate([
    attr({ mode: "boolean" })
], Tab$1.prototype, "disabled", void 0);

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n@supports selector(:focus-visible) {\n  :host(:focus) {\n    outline: none;\n  }\n}\n:host(.vertical) {\n  justify-content: end;\n  grid-column: 1/auto;\n}\n\n.base {\n  position: relative;\n  display: flex;\n  box-sizing: border-box;\n  align-items: center;\n  padding: var(--_tabs-tablist-gutter);\n  background-color: var(--_appearance-color-fill);\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  font: var(--vvd-typography-base);\n  gap: var(--_tabs-tablist-gutter);\n  min-block-size: 48px;\n  vertical-align: middle;\n  white-space: nowrap;\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.base:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.base:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-400);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.base:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n@supports (user-select: none) {\n  .base {\n    user-select: none;\n  }\n}\n.base:not(.disabled) {\n  cursor: pointer;\n}\n.base.disabled {\n  cursor: not-allowed;\n  pointer-events: none;\n}\n:host(.vertical) .base {\n  padding-inline-start: calc(var(--_tabs-active-indicator-stroke-width) + var(--_tabs-tablist-gutter));\n}\n\n:host(:not(:focus-visible)) .focus-indicator {\n  display: none;\n}\n\n.icon {\n  font-size: 20px;\n}\n\n:host(:not(.vertical)) .base::after {\n  position: absolute;\n  background: currentColor;\n  block-size: 2px;\n  content: \"\";\n  inline-size: calc(100% + var(--_tabs-tablist-gutter) * 2);\n  inset-block-end: 0;\n  margin-inline: calc(var(--_tabs-tablist-gutter) * -2);\n  pointer-events: none;\n  transition-property: opacity;\n}\n:host(:not(.vertical)):host([aria-selected=true]) .base::after {\n  transition-delay: 0.2s;\n}\n:host(:not(.vertical)):host(:not([aria-selected=true])) .base::after {\n  opacity: 0;\n}";

class Tab extends Tab$1 {
  constructor() {
    super(...arguments);
    this.tabIndex = '-1';
    this.ariaSelected = null;
  }
}
__decorate([attr, __metadata("design:type", String)], Tab.prototype, "label", void 0);
__decorate([attr({
  mode: 'fromView'
}), __metadata("design:type", Object)], Tab.prototype, "tabIndex", void 0);
__decorate([attr({
  attribute: 'aria-selected'
}), __metadata("design:type", Object)], Tab.prototype, "ariaSelected", void 0);
applyMixins(Tab, AffixIcon);

let _ = t => t,
  _t;
const getClasses = ({
  disabled,
  ariaSelected
}) => classNames('base', ['disabled', Boolean(disabled)], ['selected', ariaSelected === 'true']);
function TabTemplate(context) {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  return html(_t || (_t = _`
	<template slot="tab" role="tab" aria-disabled="${0}" aria-selected="${0}">
		<div class="${0}">
      ${0}
      ${0}
      ${0}
		</div>
	</template>`), x => x.disabled, x => x.ariaSelected, getClasses, () => focusTemplate, x => affixIconTemplate(x.icon), x => x.label);
}

const tabDefinition = Tab.compose({
  baseName: 'tab',
  template: TabTemplate,
  styles: css_248z
});
const tabRegistries = [tabDefinition(), ...iconRegistries, ...focusRegistries];
const registerTab = registerFactory(tabRegistries);

export { tabDefinition as a, registerTab as r, tabRegistries as t };
