import { F as FoundationElement, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { A as AffixIconWithTrailing, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

class Badge extends FoundationElement {}
__decorate([attr, __metadata("design:type", String)], Badge.prototype, "connotation", void 0);
__decorate([attr, __metadata("design:type", String)], Badge.prototype, "shape", void 0);
__decorate([attr, __metadata("design:type", String)], Badge.prototype, "appearance", void 0);
__decorate([attr, __metadata("design:type", String)], Badge.prototype, "text", void 0);
applyMixins(Badge, AffixIconWithTrailing);

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  --_badge-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20));\n  display: inline-flex;\n  box-sizing: border-box;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  block-size: var(--_badge-block-size);\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  column-gap: 8px;\n  font: var(--vvd-typography-base-condensed-bold);\n  max-inline-size: 100%;\n  padding-inline: 8px;\n  vertical-align: middle;\n}\n.base.connotation-cta {\n  --_connotation-color-primary: var(--vvd-color-cta-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-intermediate: var(--vvd-color-cta-500);\n  --_connotation-color-soft: var(--vvd-color-cta-100);\n  --_connotation-color-contrast: var(--vvd-color-cta-800);\n  --_connotation-color-pale: var(--vvd-color-cta-300);\n  --_connotation-color-fierce: var(--vvd-color-cta-700);\n}\n.base.connotation-success {\n  --_connotation-color-primary: var(--vvd-color-success-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-intermediate: var(--vvd-color-success-500);\n  --_connotation-color-soft: var(--vvd-color-success-100);\n  --_connotation-color-contrast: var(--vvd-color-success-800);\n  --_connotation-color-pale: var(--vvd-color-success-300);\n  --_connotation-color-fierce: var(--vvd-color-success-700);\n}\n.base.connotation-alert {\n  --_connotation-color-primary: var(--vvd-color-alert-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-intermediate: var(--vvd-color-alert-500);\n  --_connotation-color-soft: var(--vvd-color-alert-100);\n  --_connotation-color-contrast: var(--vvd-color-alert-800);\n  --_connotation-color-pale: var(--vvd-color-alert-300);\n  --_connotation-color-fierce: var(--vvd-color-alert-700);\n}\n.base.connotation-warning {\n  --_connotation-color-primary: var(--vvd-color-warning-300);\n  --_connotation-color-primary-text: var(--vvd-color-canvas-text);\n  --_connotation-color-intermediate: var(--vvd-color-warning-300);\n  --_connotation-color-soft: var(--vvd-color-warning-100);\n  --_connotation-color-contrast: var(--vvd-color-warning-800);\n  --_connotation-color-pale: var(--vvd-color-warning-300);\n  --_connotation-color-fierce: var(--vvd-color-warning-700);\n}\n.base.connotation-information {\n  --_connotation-color-primary: var(--vvd-color-information-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-intermediate: var(--vvd-color-information-500);\n  --_connotation-color-soft: var(--vvd-color-information-100);\n  --_connotation-color-contrast: var(--vvd-color-information-800);\n  --_connotation-color-pale: var(--vvd-color-information-300);\n  --_connotation-color-fierce: var(--vvd-color-information-700);\n}\n.base:not(.connotation-cta, .connotation-success, .connotation-alert, .connotation-warning, .connotation-information) {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-intermediate: var(--vvd-color-neutral-500);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n  --_connotation-color-contrast: var(--vvd-color-neutral-800);\n  --_connotation-color-pale: var(--vvd-color-neutral-300);\n  --_connotation-color-fierce: var(--vvd-color-neutral-700);\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.base.appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base.appearance-subtle {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.base.icon-only {\n  contain: size;\n  padding-inline: 0;\n  place-content: center;\n}\n@supports (aspect-ratio: 1) {\n  .base.icon-only {\n    aspect-ratio: 1;\n  }\n}\n@supports not (aspect-ratio: 1) {\n  .base.icon-only {\n    inline-size: var(--_badge-block-size);\n  }\n}\n\n.text {\n  overflow: hidden;\n  max-inline-size: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* Shape */\n.base:not(.shape-pill) {\n  border-radius: 4px;\n}\n\n.base.shape-pill {\n  border-radius: 14px;\n}\n\n/* Icon */\n.icon {\n  font-size: calc(var(--_badge-block-size) / 1.6667);\n  line-height: 1;\n}\n.icon-trailing .icon {\n  order: 1;\n}";

let _ = t => t,
  _t,
  _t2;
const getClasses = ({
  connotation,
  appearance,
  shape,
  iconTrailing,
  text,
  icon
}) => classNames('base', [`connotation-${connotation}`, Boolean(connotation)], [`appearance-${appearance}`, Boolean(appearance)], [`shape-${shape}`, Boolean(shape)], ['icon-trailing', iconTrailing], ['icon-only', !text && Boolean(icon)]);
const badgeTemplate = context => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  return html(_t || (_t = _`
    <span class="${0}">
      ${0}
			${0}
		</span>`), getClasses, x => affixIconTemplate(x.icon), when(x => x.text, x => html(_t2 || (_t2 = _`<span class="text">${0}</span>`), x.text)));
};

const badgeDefinition = Badge.compose({
  baseName: 'badge',
  template: badgeTemplate,
  styles: css_248z
});
const badgeRegistries = [badgeDefinition(), ...iconRegistries];
const registerBadge = registerFactory(badgeRegistries);

export { badgeDefinition as b, registerBadge as r };
