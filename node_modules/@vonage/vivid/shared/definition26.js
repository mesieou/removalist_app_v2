import { F as FoundationElement, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { E as Elevation, e as elevationRegistries } from './definition8.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.base {\n  z-index: 1;\n  block-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2))) + calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16)));\n  font: var(--vvd-typography-heading-4);\n  inline-size: 100%;\n}\n.base .header-content {\n  display: inline-flex;\n  align-items: center;\n  column-gap: 4px;\n}\n\n.container {\n  display: flex;\n  box-sizing: border-box;\n  justify-content: space-between;\n  block-size: inherit;\n  color: var(--vvd-color-canvas-text);\n  column-gap: 12px;\n  padding-block: 8px;\n  padding-inline: 16px;\n}\n.container[part~=vvd-theme-alternate] {\n  background-color: var(--vvd-color-canvas);\n  color: var(--vvd-color-canvas-text);\n  color-scheme: var(--vvd-color-scheme);\n}\n\n.app-content {\n  --vvd-header-block-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2))) + calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16)));\n}";

class Header extends FoundationElement {
  constructor() {
    super(...arguments);
    this.elevationShadow = false;
    this.alternate = false;
  }
}
__decorate([attr({
  attribute: 'elevation-shadow',
  mode: 'boolean'
}), __metadata("design:type", Object)], Header.prototype, "elevationShadow", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Header.prototype, "alternate", void 0);

let _ = t => t,
  _t;
const getPartAlternate = ({
  alternate
}) => classNames(['vvd-theme-alternate', Boolean(alternate)]);
const headerTemplate = context => {
  const elevationTag = context.tagFor(Elevation);
  return html(_t || (_t = _`
    <${0} dp="4" ?no-shadow=${0}>
      <header class="base" part="base">
        <!-- a container is needed to distinguish the surface background color of the
        element from its shadow when applying elevation with alternate -->
        <div class="container" part="${0}">
          <section class="header-content">
            <slot></slot>
          </section>
          <section class="header-content">
            <slot name="action-items"></slot>
          </section>
        </div>
      </header>
    </${0}>
    <div class="app-content">
      <slot name="app-content"></slot>
    </div>
	`), elevationTag, x => !x.elevationShadow, getPartAlternate, elevationTag);
};

const headerDefinition = Header.compose({
  baseName: 'header',
  template: headerTemplate,
  styles: css_248z
});
const headerRegistries = [headerDefinition(), ...elevationRegistries];
const registerHeader = registerFactory(headerRegistries);

export { headerRegistries as a, headerDefinition as h, registerHeader as r };
