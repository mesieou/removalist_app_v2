import { F as FoundationElement, U as __classPrivateFieldGet, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var _SideDrawer_instances, _SideDrawer_close, _SideDrawer_open;
class SideDrawer extends FoundationElement {
  constructor() {
    super(...arguments);
    _SideDrawer_instances.add(this);
    this.alternate = false;
    this.modal = false;
    this.open = false;
    this.trailing = false;
  }
  attributeChangedCallback(name, oldValue, newValue) {
    super.attributeChangedCallback(name, oldValue, newValue);
    switch (name) {
      case 'open':
        {
          this.open ? __classPrivateFieldGet(this, _SideDrawer_instances, "m", _SideDrawer_open).call(this) : __classPrivateFieldGet(this, _SideDrawer_instances, "m", _SideDrawer_close).call(this);
        }
    }
  }
}
_SideDrawer_instances = new WeakSet(), _SideDrawer_close = function _SideDrawer_close() {
  this.$emit('close', undefined, {
    bubbles: false
  });
}, _SideDrawer_open = function _SideDrawer_open() {
  this.$emit('open', undefined, {
    bubbles: false
  });
};
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], SideDrawer.prototype, "alternate", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], SideDrawer.prototype, "modal", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], SideDrawer.prototype, "open", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], SideDrawer.prototype, "trailing", void 0);

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.control {\n  position: fixed;\n  z-index: 1;\n  background-color: var(--vvd-color-canvas);\n  color: var(--vvd-color-canvas-text);\n  inline-size: 280px;\n  inset-block: 0;\n  overflow-y: auto;\n}\n.control[part~=vvd-theme-alternate] {\n  background-color: var(--vvd-color-canvas);\n  color: var(--vvd-color-canvas-text);\n  color-scheme: var(--vvd-color-scheme);\n}\n.control.trailing {\n  inset-inline-end: 0;\n}\n.control:not(.open).trailing {\n  transform: translateX(100%);\n}\n.control:not(.open):not(.trailing) {\n  transform: translateX(-100%);\n}\n.control.open:not(.modal).trailing + .side-drawer-app-content {\n  margin-inline-end: var(--side-drawer-app-content-offset, 280px);\n}\n.control.open:not(.modal):not(.trailing) + .side-drawer-app-content {\n  margin-inline-start: var(--side-drawer-app-content-offset, 280px);\n}\n@media (prefers-reduced-motion: no-preference) {\n  .control {\n    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}\n\n.scrim {\n  background-color: var(--vvd-color-canvas-text, currentColor);\n  opacity: 0.5;\n  position: fixed;\n  inset: 0;\n}\n.scrim:not(.open) {\n  display: none;\n}";

let _ = t => t,
  _t,
  _t2;
const getClasses = ({
  modal,
  open,
  trailing
}) => classNames('control', ['modal', modal], ['open', open], ['trailing', trailing]);
const getScrimClasses = ({
  open
}) => classNames('scrim', ['open', open]);
const sideDrawerTemplate = () => html(_t || (_t = _`
	<aside class="${0}" part="base ${0}"
	 @keydown="${0}">
    <slot></slot>
	</aside>

	<div class="side-drawer-app-content" ?inert="${0}">
		<slot name="app-content"></slot>
	</div>

	${0}
`), getClasses, x => x.alternate ? 'vvd-theme-alternate' : '', (x, c) => handleKeydown(x, c.event), x => x.open && x.modal, when(x => x.modal, html(_t2 || (_t2 = _`<div class="${0}" @click="${0}"></div>`), getScrimClasses, x => x.open = false)));
const handleKeydown = (x, {
  key
}) => {
  if (key === 'Escape') {
    x.open = false;
  } else {
    return true;
  }
};

const sideDrawerDefinition = SideDrawer.compose({
  baseName: 'side-drawer',
  template: sideDrawerTemplate,
  styles: css_248z
});
const sideDrawerRegistries = [sideDrawerDefinition()];
const registerSideDrawer = registerFactory(sideDrawerRegistries);

export { sideDrawerRegistries as a, registerSideDrawer as r, sideDrawerDefinition as s };
