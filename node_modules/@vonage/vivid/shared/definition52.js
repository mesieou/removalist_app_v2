import { _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { i as iconRegistries } from './definition3.js';
import { f as focusRegistries } from './definition4.js';
import { b as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { T as TreeItem$1 } from './tree-item.js';
import { a as applyMixins } from './apply-mixins.js';
import { I as Icon } from './icon.js';
import { f as focusTemplateFactory } from './focus2.js';
import { e as elements } from './node-observation.js';
import { w as when } from './when.js';
import { s as slotted } from './slotted.js';
import { c as children } from './children.js';
import { c as classNames } from './class-names.js';
import { r as ref } from './ref.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n@supports selector(:focus-visible) {\n  :host(:focus) {\n    outline: none;\n  }\n}\n.control {\n  position: relative;\n  display: inline-flex;\n  box-sizing: border-box;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  border-radius: 6px;\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  font: var(--vvd-typography-base);\n  gap: 12px;\n  hyphens: auto;\n  inline-size: 100%;\n  min-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n  padding-inline: 16px;\n  text-decoration: none;\n  vertical-align: middle;\n  word-break: break-word;\n}\n.control {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.control:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-400);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.control:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.control:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.control:where(.selected, [aria-current]):where(:not(:disabled, .disabled, :hover, .hover)) {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.control:where(.selected, [aria-current]):where(:hover, .hover) {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary-increment);\n  --_appearance-color-outline: transparent;\n}\n.control {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n  --_connotation-color-primary-increment: var(--vvd-color-neutral-800);\n  --_connotation-color-faint: var(--vvd-color-neutral-50);\n  --_connotation-color-soft: var(--vvd-color-neutral-100);\n}\n@supports selector(:focus-visible) {\n  .control:focus {\n    outline: none;\n  }\n}\n@supports (user-select: none) {\n  .control {\n    user-select: none;\n  }\n}\n.control:not(.disabled) {\n  cursor: pointer;\n}\n.control.disabled {\n  cursor: not-allowed;\n  pointer-events: none;\n}\n.control .text {\n  font: var(--vvd-typography-base);\n}\n\n.expandCollapseButton {\n  display: flex;\n  align-items: center;\n  border-radius: 6px;\n  font-size: 20px;\n}\n.expandCollapseButton .expandCollapseIcon {\n  margin: 4px;\n}\n.expandCollapseButton:hover {\n  background-color: var(--vvd-color-neutral-100);\n}\n\n.items {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-block: 4px;\n  padding-inline-start: 48px;\n}\n\n:host(:not(:focus-visible)) .focus-indicator {\n  display: none;\n}\n\n.icon {\n  font-size: 20px;\n  line-height: 1;\n}\n.control:not(.disabled, .selected) .icon {\n  color: var(--vvd-color-neutral-600);\n}";

class TreeItem extends TreeItem$1 {}
__decorate([attr, __metadata("design:type", String)], TreeItem.prototype, "text", void 0);
applyMixins(TreeItem, AffixIcon);

let _ = t => t,
  _t,
  _t2,
  _t3;
const getClasses = ({
  disabled,
  selected
}) => classNames('control', ['disabled', disabled], ['selected', Boolean(selected)]);
const expandCollapseButton = context => {
  const iconTag = context.tagFor(Icon);
  return html(_t || (_t = _`
	<div aria-hidden="true"
		class="expandCollapseButton"
		@click="${0}"
			${0}
	>
		<${0} class="expandCollapseIcon" name="${0}"></${0}>
	</div>`), (x, c) => x.handleExpandCollapseButtonClick(c.event), ref('expandCollapseButton'), iconTag, x => x.expanded ? 'chevron-down-line' : 'chevron-right-line', iconTag);
};
const TreeItemTemplate = context => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  return html(_t2 || (_t2 = _`
	<template
			role="treeitem"
			slot="${0}"
			tabindex="-1"
			aria-expanded="${0}"
			aria-selected="${0}"
			aria-disabled="${0}"
			@focusin="${0}"
			@focusout="${0}"
			${0}
			>
			<div class="${0}">
				${0}
				${0}
				${0}
				${0}
			</div>
			${0}
		</template>`), x => x.isNestedItem() ? 'item' : void 0, x => x.childItems && x.childItems.length > 0 ? x.expanded : void 0, x => x.selected, x => x.disabled, (x, c) => x.handleFocus(c.event), (x, c) => x.handleBlur(c.event), children({
    property: 'childItems',
    filter: elements()
  }), getClasses, () => focusTemplate, when(x => x.childItems && x.childItems.length > 0, expandCollapseButton(context)), x => affixIconTemplate(x.icon), x => x.text, when(x => x.childItems && x.childItems.length > 0 && x.expanded, html(_t3 || (_t3 = _`
				<div role="group" class="items">
					<slot name="item" ${0}></slot>
				</div>`), slotted('items'))));
};

const treeItemDefinition = TreeItem.compose({
  baseName: 'tree-item',
  template: TreeItemTemplate,
  styles: css_248z
});
const treeItemRegistries = [treeItemDefinition(), ...iconRegistries, ...focusRegistries];
const registerTreeItem = registerFactory(treeItemRegistries);

export { treeItemRegistries as a, registerTreeItem as r, treeItemDefinition as t };
