import { F as FoundationElement, U as __classPrivateFieldGet, _ as __decorate, a as attr, b as __metadata, h as html, r as registerFactory } from './index.js';
import { b as buttonRegistries } from './definition7.js';
import { E as Elevation, e as elevationRegistries } from './definition8.js';
import { i as iconRegistries } from './definition3.js';
import { C as Connotation } from './enums.js';
import { b as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import './focus.js';
import './form-elements.js';
import { B as Button } from './button.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Wed, 17 May 2023 03:28:45 GMT\n */\n.control {\n  position: fixed;\n  z-index: 10;\n  border-radius: 6px;\n  inline-size: max-content;\n  inset-block-end: 0;\n  inset-inline-end: 0;\n  inset-inline-start: 0;\n  margin-block: 16px;\n  margin-inline: auto;\n  min-inline-size: var(--alert-min-inline-size, 420px);\n  transition: opacity 150ms cubic-bezier(0, 0, 0.2, 1) 0ms, transform 150ms cubic-bezier(0, 0, 0.2, 1) 0ms;\n}\n.control.placement-top, .control.placement-top-start, .control.placement-top-end {\n  inset-block-end: auto;\n  inset-block-start: 0;\n}\n.control.placement-top-start, .control.placement-bottom-start {\n  right: auto;\n  inset-inline-end: auto;\n  margin-inline: 16px;\n}\n.control.placement-top-end, .control.placement-bottom-end {\n  inset-inline-start: auto;\n  margin-inline: 16px;\n}\n.control:not(.open) {\n  opacity: 0;\n  transform: scale(0.8);\n}\n.control.open {\n  opacity: 1;\n  transform: scale(1);\n}\n\n.base {\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  background-color: var(--vvd-color-neutral-50);\n  border-radius: 6px;\n  color: var(--vvd-color-canvas-text);\n  column-gap: 16px;\n}\n.base.connotation-success {\n  --_connotation-color-primary: var(--vvd-color-success-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.base.connotation-information {\n  --_connotation-color-primary: var(--vvd-color-information-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.base.connotation-alert {\n  --_connotation-color-primary: var(--vvd-color-alert-500);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.base.connotation-warning {\n  --_connotation-color-primary: var(--vvd-color-warning-300);\n  --_connotation-color-primary-text: var(--vvd-color-canvas-text);\n}\n.base:not(.connotation-success, .connotation-information, .connotation-alert, .connotation-warning) {\n  --_connotation-color-primary: var(--vvd-color-canvas-text);\n  --_connotation-color-primary-text: var(--vvd-color-canvas);\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.base .alert-text {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  justify-self: flex-start;\n  margin-inline-end: auto;\n}\n.base .alert-text .headline {\n  font: var(--vvd-typography-base-bold);\n}\n.base .alert-text .subtitle {\n  font: var(--vvd-typography-base);\n}\n.base .icon {\n  flex-shrink: 0;\n  color: var(--_appearance-color-fill);\n  font-size: 24px;\n  line-height: 1;\n}\n.base .dismiss-button {\n  border-left: 1px solid var(--vvd-color-neutral-200);\n  padding-inline-start: 8px;\n}";

var _Alert_show, _Alert_closeOnKeyDown;
const connotationIconMap = new Map([[Connotation.Accent, 'megaphone-line'], [Connotation.Information, 'info-line'], [Connotation.Success, 'check-circle-line'], [Connotation.Warning, 'warning-line'], [Connotation.Alert, 'error-line']]);
const defaultConnotation = connotation => connotationIconMap.get(connotation);
class Alert extends FoundationElement {
  constructor() {
    super(...arguments);
    this.removable = false;
    this.placement = 'bottom';
    this.open = false;
    this.timeoutms = 0;
    _Alert_show.set(this, () => {
      this.open = true;
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      if (this.timeoutms > 0) {
        this.timeout = setTimeout(this.remove, this.timeoutms);
      }
    });
    this.remove = () => {
      this.open = false;
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      this.$emit('removed');
    };
    _Alert_closeOnKeyDown.set(this, e => {
      if (e.key !== 'Escape' || !this.removable) {
        return;
      }
      this.remove();
    });
  }
  get conditionedIcon() {
    var _a;
    return (_a = this.icon) !== null && _a !== void 0 ? _a : defaultConnotation(this.connotation);
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener('keydown', __classPrivateFieldGet(this, _Alert_closeOnKeyDown, "f"));
    if (this.open) {
      __classPrivateFieldGet(this, _Alert_show, "f").call(this);
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener('keydown', __classPrivateFieldGet(this, _Alert_closeOnKeyDown, "f"));
    clearTimeout(this.timeout);
  }
  attributeChangedCallback(name, oldValue, newValue) {
    super.attributeChangedCallback(name, oldValue, newValue);
    switch (name) {
      case 'open':
        {
          this.open ? __classPrivateFieldGet(this, _Alert_show, "f").call(this) : this.remove();
        }
    }
  }
}
_Alert_show = new WeakMap(), _Alert_closeOnKeyDown = new WeakMap();
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Alert.prototype, "removable", void 0);
__decorate([attr({
  mode: 'fromView'
}), __metadata("design:type", String)], Alert.prototype, "placement", void 0);
__decorate([attr, __metadata("design:type", String)], Alert.prototype, "headline", void 0);
__decorate([attr, __metadata("design:type", String)], Alert.prototype, "subtitle", void 0);
__decorate([attr, __metadata("design:type", String)], Alert.prototype, "icon", void 0);
__decorate([attr({
  mode: 'boolean'
}), __metadata("design:type", Object)], Alert.prototype, "open", void 0);
__decorate([attr({
  mode: 'fromView'
}), __metadata("design:type", Number)], Alert.prototype, "timeoutms", void 0);
__decorate([attr, __metadata("design:type", String)], Alert.prototype, "connotation", void 0);
applyMixins(Alert, AffixIcon);

let _2 = t => t,
  _t,
  _t2,
  _t3,
  _t4,
  _t5;
const getClasses = _ => classNames('base', [`connotation-${_.connotation}`, !!_.connotation]);
const getControlClasses = _ => classNames('control', ['open', _.open], [`placement-${_.placement}`, !!_.placement]);
function Headline() {
  return html(_t || (_t = _2`
		<div class="headline">${0}</div>
	`), x => x.headline);
}
function Subtitle() {
  return html(_t2 || (_t2 = _2`
		<div class="subtitle">${0}</div>
	`), x => x.subtitle);
}
function renderIcon(context) {
  const affixIconTemplate = affixIconTemplateFactory(context);
  return html(_t3 || (_t3 = _2`
	${0}
	`), x => affixIconTemplate(x.conditionedIcon));
}
function renderDismissButton(buttonTag) {
  return html(_t4 || (_t4 = _2`
	  <${0}
			size="condensed"
			class="dismiss-button"
			icon="close-line"
			@click="${0}">
	  </${0}>`), buttonTag, x => x.remove(), buttonTag);
}
const AlertTemplate = context => {
  const elevationTag = context.tagFor(Elevation);
  const buttonTag = context.tagFor(Button);
  return html(_t5 || (_t5 = _2`
	<${0} class="elevation" dp='8' exportparts="vvd-theme-alternate">
		<div class="${0}" role="alert" aria-live="assertive">
			<slot name="main">
				<div part="vvd-theme-alternate" class="${0}">
					${0}
					<div class="alert-text">
						${0}
						${0}
					</div>
					<slot class="action-items" name="action-items"></slot>
					${0}
				</div>
			</slot>
		</div>
	</${0}>
	`), elevationTag, getControlClasses, getClasses, when(x => x.icon || x.connotation, renderIcon(context)), when(x => x.headline, Headline()), when(x => x.subtitle, Subtitle()), when(x => x.removable, renderDismissButton(buttonTag)), elevationTag);
};

const alertDefinition = Alert.compose({
  baseName: 'alert',
  template: AlertTemplate,
  styles: css_248z
});
const alertRegistries = [alertDefinition(), ...iconRegistries, ...buttonRegistries, ...elevationRegistries];
const registerAlert = registerFactory(alertRegistries);

export { alertDefinition as a, alertRegistries as b, registerAlert as r };
