import { Controller as o } from "@hotwired/stimulus";
class a extends o {
  connect() {
    if (!this.hasUrlValue) {
      console.error("[stimulus-content-loader] You need to pass an url to fetch the remote content.");
      return;
    }
    this.hasLazyLoadingValue ? this.lazyLoad() : this.load();
  }
  disconnect() {
    this.stopRefreshing();
  }
  load() {
    this.fetch(), this.hasRefreshIntervalValue && this.startRefreshing();
  }
  lazyLoad() {
    const e = {
      threshold: this.lazyLoadingThresholdValue,
      rootMargin: this.lazyLoadingRootMarginValue
    };
    new IntersectionObserver(
      (s, i) => {
        s.forEach((r) => {
          r.isIntersecting && (this.load(), i.unobserve(r.target));
        });
      },
      e
    ).observe(this.element);
  }
  fetch() {
    fetch(this.urlValue).then((e) => e.text()).then((e) => {
      this.element.innerHTML = e, this.loadScriptsValue && this.loadScripts();
    });
  }
  startRefreshing() {
    this.refreshTimer = setInterval(() => {
      this.fetch();
    }, this.refreshIntervalValue);
  }
  stopRefreshing() {
    this.refreshTimer && clearInterval(this.refreshTimer);
  }
  loadScripts() {
    this.element.querySelectorAll("script").forEach((e) => {
      const t = document.createElement("script");
      t.innerHTML = e.innerHTML, document.head.appendChild(t).parentNode.removeChild(t);
    });
  }
}
a.values = {
  url: String,
  lazyLoading: Boolean,
  lazyLoadingThreshold: Number,
  lazyLoadingRootMargin: {
    type: String,
    default: "0px"
  },
  refreshInterval: Number,
  loadScripts: Boolean
};
export {
  a as default
};
